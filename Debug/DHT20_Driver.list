
DHT20_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d34  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08002ebc  08002ebc  00012ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ec4  08002ec4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002ec4  08002ec4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ec4  08002ec4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ec4  08002ec4  00012ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ec8  08002ec8  00012ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002ecc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000378  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000384  20000384  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000ce2d  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000021ce  00000000  00000000  0002ceac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000b30  00000000  00000000  0002f080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000088a  00000000  00000000  0002fbb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020cdd  00000000  00000000  0003043a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000e5f6  00000000  00000000  00051117  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c90c4  00000000  00000000  0005f70d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002e94  00000000  00000000  001287d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  0012b668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002ea4 	.word	0x08002ea4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002ea4 	.word	0x08002ea4

080001c8 <gpio_config>:
 * PB6-> SCL
 * PB7 -> SDA
 */

void gpio_config(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b08c      	sub	sp, #48	; 0x30
 80001cc:	af00      	add	r7, sp, #0
	/*
	* Activate clock for GPIOB
	*/
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80001ce:	2300      	movs	r3, #0
 80001d0:	607b      	str	r3, [r7, #4]
 80001d2:	4b18      	ldr	r3, [pc, #96]	; (8000234 <gpio_config+0x6c>)
 80001d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001d6:	4a17      	ldr	r2, [pc, #92]	; (8000234 <gpio_config+0x6c>)
 80001d8:	f043 0302 	orr.w	r3, r3, #2
 80001dc:	6313      	str	r3, [r2, #48]	; 0x30
 80001de:	4b15      	ldr	r3, [pc, #84]	; (8000234 <gpio_config+0x6c>)
 80001e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001e2:	f003 0302 	and.w	r3, r3, #2
 80001e6:	607b      	str	r3, [r7, #4]
 80001e8:	687b      	ldr	r3, [r7, #4]

	/*
	* GPIO configuration
	*/
	GPIO_InitTypeDef i2c_scl;
	i2c_scl.Mode = GPIO_MODE_AF_OD;
 80001ea:	2312      	movs	r3, #18
 80001ec:	623b      	str	r3, [r7, #32]
	i2c_scl.Pin = GPIO_PIN_6;
 80001ee:	2340      	movs	r3, #64	; 0x40
 80001f0:	61fb      	str	r3, [r7, #28]
	i2c_scl.Pull = GPIO_NOPULL;
 80001f2:	2300      	movs	r3, #0
 80001f4:	627b      	str	r3, [r7, #36]	; 0x24
	i2c_scl.Speed = GPIO_SPEED_FREQ_HIGH;
 80001f6:	2302      	movs	r3, #2
 80001f8:	62bb      	str	r3, [r7, #40]	; 0x28
	i2c_scl.Alternate = GPIO_AF4_I2C1;
 80001fa:	2304      	movs	r3, #4
 80001fc:	62fb      	str	r3, [r7, #44]	; 0x2c

	HAL_GPIO_Init(GPIOB, &i2c_scl);
 80001fe:	f107 031c 	add.w	r3, r7, #28
 8000202:	4619      	mov	r1, r3
 8000204:	480c      	ldr	r0, [pc, #48]	; (8000238 <gpio_config+0x70>)
 8000206:	f000 fad5 	bl	80007b4 <HAL_GPIO_Init>

	GPIO_InitTypeDef i2c_sda;
	i2c_sda.Mode = GPIO_MODE_AF_OD;
 800020a:	2312      	movs	r3, #18
 800020c:	60fb      	str	r3, [r7, #12]
	i2c_sda.Pin = GPIO_PIN_7;
 800020e:	2380      	movs	r3, #128	; 0x80
 8000210:	60bb      	str	r3, [r7, #8]
	i2c_sda.Pull = GPIO_NOPULL;
 8000212:	2300      	movs	r3, #0
 8000214:	613b      	str	r3, [r7, #16]
	i2c_sda.Speed = GPIO_SPEED_FREQ_HIGH;
 8000216:	2302      	movs	r3, #2
 8000218:	617b      	str	r3, [r7, #20]
	i2c_sda.Alternate = GPIO_AF4_I2C1;
 800021a:	2304      	movs	r3, #4
 800021c:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(GPIOB, &i2c_sda);
 800021e:	f107 0308 	add.w	r3, r7, #8
 8000222:	4619      	mov	r1, r3
 8000224:	4804      	ldr	r0, [pc, #16]	; (8000238 <gpio_config+0x70>)
 8000226:	f000 fac5 	bl	80007b4 <HAL_GPIO_Init>
}
 800022a:	bf00      	nop
 800022c:	3730      	adds	r7, #48	; 0x30
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	40023800 	.word	0x40023800
 8000238:	40020400 	.word	0x40020400

0800023c <i2c_config>:

I2C_HandleTypeDef hi2c;

I2C_HandleTypeDef i2c_config(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b084      	sub	sp, #16
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
	/*
	* Activate clock for I2C1
	*/
	__HAL_RCC_I2C1_CLK_ENABLE();
 8000244:	2300      	movs	r3, #0
 8000246:	60fb      	str	r3, [r7, #12]
 8000248:	4b19      	ldr	r3, [pc, #100]	; (80002b0 <i2c_config+0x74>)
 800024a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800024c:	4a18      	ldr	r2, [pc, #96]	; (80002b0 <i2c_config+0x74>)
 800024e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000252:	6413      	str	r3, [r2, #64]	; 0x40
 8000254:	4b16      	ldr	r3, [pc, #88]	; (80002b0 <i2c_config+0x74>)
 8000256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000258:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800025c:	60fb      	str	r3, [r7, #12]
 800025e:	68fb      	ldr	r3, [r7, #12]

	/*
	* I2C configuration
	*/

	hi2c.Instance = I2C1;
 8000260:	4b14      	ldr	r3, [pc, #80]	; (80002b4 <i2c_config+0x78>)
 8000262:	4a15      	ldr	r2, [pc, #84]	; (80002b8 <i2c_config+0x7c>)
 8000264:	601a      	str	r2, [r3, #0]
	hi2c.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000266:	4b13      	ldr	r3, [pc, #76]	; (80002b4 <i2c_config+0x78>)
 8000268:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800026c:	611a      	str	r2, [r3, #16]
	hi2c.Init.OwnAddress1 = DHT20_DEVICE_ADDRESS;
 800026e:	4b11      	ldr	r3, [pc, #68]	; (80002b4 <i2c_config+0x78>)
 8000270:	2238      	movs	r2, #56	; 0x38
 8000272:	60da      	str	r2, [r3, #12]
	// hi2c.Init.OwnAddress2 = 0;
	hi2c.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000274:	4b0f      	ldr	r3, [pc, #60]	; (80002b4 <i2c_config+0x78>)
 8000276:	2200      	movs	r2, #0
 8000278:	609a      	str	r2, [r3, #8]
	hi2c.Init.ClockSpeed = 100000;
 800027a:	4b0e      	ldr	r3, [pc, #56]	; (80002b4 <i2c_config+0x78>)
 800027c:	4a0f      	ldr	r2, [pc, #60]	; (80002bc <i2c_config+0x80>)
 800027e:	605a      	str	r2, [r3, #4]
	hi2c.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000280:	4b0c      	ldr	r3, [pc, #48]	; (80002b4 <i2c_config+0x78>)
 8000282:	2200      	movs	r2, #0
 8000284:	621a      	str	r2, [r3, #32]
	hi2c.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000286:	4b0b      	ldr	r3, [pc, #44]	; (80002b4 <i2c_config+0x78>)
 8000288:	2200      	movs	r2, #0
 800028a:	615a      	str	r2, [r3, #20]
	hi2c.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800028c:	4b09      	ldr	r3, [pc, #36]	; (80002b4 <i2c_config+0x78>)
 800028e:	2200      	movs	r2, #0
 8000290:	61da      	str	r2, [r3, #28]

	HAL_I2C_Init(&hi2c);
 8000292:	4808      	ldr	r0, [pc, #32]	; (80002b4 <i2c_config+0x78>)
 8000294:	f001 fd56 	bl	8001d44 <HAL_I2C_Init>

	return hi2c;
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	4a06      	ldr	r2, [pc, #24]	; (80002b4 <i2c_config+0x78>)
 800029c:	4618      	mov	r0, r3
 800029e:	4611      	mov	r1, r2
 80002a0:	2354      	movs	r3, #84	; 0x54
 80002a2:	461a      	mov	r2, r3
 80002a4:	f002 fdf0 	bl	8002e88 <memcpy>
}
 80002a8:	6878      	ldr	r0, [r7, #4]
 80002aa:	3710      	adds	r7, #16
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	40023800 	.word	0x40023800
 80002b4:	20000028 	.word	0x20000028
 80002b8:	40005400 	.word	0x40005400
 80002bc:	000186a0 	.word	0x000186a0

080002c0 <main>:

int main(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b09a      	sub	sp, #104	; 0x68
 80002c4:	af02      	add	r7, sp, #8
	HAL_Init();
 80002c6:	f000 f8f9 	bl	80004bc <HAL_Init>

	gpio_config();
 80002ca:	f7ff ff7d 	bl	80001c8 <gpio_config>

	i2c_config();
 80002ce:	463b      	mov	r3, r7
 80002d0:	4618      	mov	r0, r3
 80002d2:	f7ff ffb3 	bl	800023c <i2c_config>

	// Sending dummy data
	uint8_t TX_Buffer[] = "A";
 80002d6:	2341      	movs	r3, #65	; 0x41
 80002d8:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

	HAL_I2C_Master_Transmit(&hi2c, DHT20_DEVICE_ADDRESS_WRITE, TX_Buffer, 1, 1000);
 80002dc:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80002e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002e4:	9300      	str	r3, [sp, #0]
 80002e6:	2301      	movs	r3, #1
 80002e8:	2170      	movs	r1, #112	; 0x70
 80002ea:	4803      	ldr	r0, [pc, #12]	; (80002f8 <main+0x38>)
 80002ec:	f001 fe6e 	bl	8001fcc <HAL_I2C_Master_Transmit>
	HAL_Delay(100);
 80002f0:	2064      	movs	r0, #100	; 0x64
 80002f2:	f000 f955 	bl	80005a0 <HAL_Delay>


	while(1);
 80002f6:	e7fe      	b.n	80002f6 <main+0x36>
 80002f8:	20000028 	.word	0x20000028

080002fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000302:	2300      	movs	r3, #0
 8000304:	607b      	str	r3, [r7, #4]
 8000306:	4b10      	ldr	r3, [pc, #64]	; (8000348 <HAL_MspInit+0x4c>)
 8000308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800030a:	4a0f      	ldr	r2, [pc, #60]	; (8000348 <HAL_MspInit+0x4c>)
 800030c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000310:	6453      	str	r3, [r2, #68]	; 0x44
 8000312:	4b0d      	ldr	r3, [pc, #52]	; (8000348 <HAL_MspInit+0x4c>)
 8000314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000316:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800031a:	607b      	str	r3, [r7, #4]
 800031c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800031e:	2300      	movs	r3, #0
 8000320:	603b      	str	r3, [r7, #0]
 8000322:	4b09      	ldr	r3, [pc, #36]	; (8000348 <HAL_MspInit+0x4c>)
 8000324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000326:	4a08      	ldr	r2, [pc, #32]	; (8000348 <HAL_MspInit+0x4c>)
 8000328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800032c:	6413      	str	r3, [r2, #64]	; 0x40
 800032e:	4b06      	ldr	r3, [pc, #24]	; (8000348 <HAL_MspInit+0x4c>)
 8000330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000336:	603b      	str	r3, [r7, #0]
 8000338:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800033a:	2007      	movs	r0, #7
 800033c:	f000 fa06 	bl	800074c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000340:	bf00      	nop
 8000342:	3708      	adds	r7, #8
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}
 8000348:	40023800 	.word	0x40023800

0800034c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b08a      	sub	sp, #40	; 0x28
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000354:	f107 0314 	add.w	r3, r7, #20
 8000358:	2200      	movs	r2, #0
 800035a:	601a      	str	r2, [r3, #0]
 800035c:	605a      	str	r2, [r3, #4]
 800035e:	609a      	str	r2, [r3, #8]
 8000360:	60da      	str	r2, [r3, #12]
 8000362:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4a19      	ldr	r2, [pc, #100]	; (80003d0 <HAL_I2C_MspInit+0x84>)
 800036a:	4293      	cmp	r3, r2
 800036c:	d12c      	bne.n	80003c8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800036e:	2300      	movs	r3, #0
 8000370:	613b      	str	r3, [r7, #16]
 8000372:	4b18      	ldr	r3, [pc, #96]	; (80003d4 <HAL_I2C_MspInit+0x88>)
 8000374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000376:	4a17      	ldr	r2, [pc, #92]	; (80003d4 <HAL_I2C_MspInit+0x88>)
 8000378:	f043 0302 	orr.w	r3, r3, #2
 800037c:	6313      	str	r3, [r2, #48]	; 0x30
 800037e:	4b15      	ldr	r3, [pc, #84]	; (80003d4 <HAL_I2C_MspInit+0x88>)
 8000380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000382:	f003 0302 	and.w	r3, r3, #2
 8000386:	613b      	str	r3, [r7, #16]
 8000388:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800038a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800038e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000390:	2312      	movs	r3, #18
 8000392:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000394:	2301      	movs	r3, #1
 8000396:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000398:	2300      	movs	r3, #0
 800039a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800039c:	2304      	movs	r3, #4
 800039e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003a0:	f107 0314 	add.w	r3, r7, #20
 80003a4:	4619      	mov	r1, r3
 80003a6:	480c      	ldr	r0, [pc, #48]	; (80003d8 <HAL_I2C_MspInit+0x8c>)
 80003a8:	f000 fa04 	bl	80007b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80003ac:	2300      	movs	r3, #0
 80003ae:	60fb      	str	r3, [r7, #12]
 80003b0:	4b08      	ldr	r3, [pc, #32]	; (80003d4 <HAL_I2C_MspInit+0x88>)
 80003b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003b4:	4a07      	ldr	r2, [pc, #28]	; (80003d4 <HAL_I2C_MspInit+0x88>)
 80003b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80003ba:	6413      	str	r3, [r2, #64]	; 0x40
 80003bc:	4b05      	ldr	r3, [pc, #20]	; (80003d4 <HAL_I2C_MspInit+0x88>)
 80003be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80003c4:	60fb      	str	r3, [r7, #12]
 80003c6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80003c8:	bf00      	nop
 80003ca:	3728      	adds	r7, #40	; 0x28
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	40005400 	.word	0x40005400
 80003d4:	40023800 	.word	0x40023800
 80003d8:	40020400 	.word	0x40020400

080003dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003e0:	e7fe      	b.n	80003e0 <NMI_Handler+0x4>

080003e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003e2:	b480      	push	{r7}
 80003e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003e6:	e7fe      	b.n	80003e6 <HardFault_Handler+0x4>

080003e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003ec:	e7fe      	b.n	80003ec <MemManage_Handler+0x4>

080003ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003ee:	b480      	push	{r7}
 80003f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003f2:	e7fe      	b.n	80003f2 <BusFault_Handler+0x4>

080003f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003f8:	e7fe      	b.n	80003f8 <UsageFault_Handler+0x4>

080003fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003fa:	b480      	push	{r7}
 80003fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003fe:	bf00      	nop
 8000400:	46bd      	mov	sp, r7
 8000402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000406:	4770      	bx	lr

08000408 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800040c:	bf00      	nop
 800040e:	46bd      	mov	sp, r7
 8000410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000414:	4770      	bx	lr

08000416 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000416:	b480      	push	{r7}
 8000418:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800041a:	bf00      	nop
 800041c:	46bd      	mov	sp, r7
 800041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000422:	4770      	bx	lr

08000424 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000428:	f000 f89a 	bl	8000560 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800042c:	bf00      	nop
 800042e:	bd80      	pop	{r7, pc}

08000430 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000434:	4802      	ldr	r0, [pc, #8]	; (8000440 <OTG_FS_IRQHandler+0x10>)
 8000436:	f000 fb59 	bl	8000aec <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800043a:	bf00      	nop
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	20000080 	.word	0x20000080

08000444 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000448:	4b06      	ldr	r3, [pc, #24]	; (8000464 <SystemInit+0x20>)
 800044a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800044e:	4a05      	ldr	r2, [pc, #20]	; (8000464 <SystemInit+0x20>)
 8000450:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000454:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000458:	bf00      	nop
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	e000ed00 	.word	0xe000ed00

08000468 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000468:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800046c:	480d      	ldr	r0, [pc, #52]	; (80004a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800046e:	490e      	ldr	r1, [pc, #56]	; (80004a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000470:	4a0e      	ldr	r2, [pc, #56]	; (80004ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000472:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000474:	e002      	b.n	800047c <LoopCopyDataInit>

08000476 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000476:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000478:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800047a:	3304      	adds	r3, #4

0800047c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800047c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800047e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000480:	d3f9      	bcc.n	8000476 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000482:	4a0b      	ldr	r2, [pc, #44]	; (80004b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000484:	4c0b      	ldr	r4, [pc, #44]	; (80004b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000486:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000488:	e001      	b.n	800048e <LoopFillZerobss>

0800048a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800048a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800048c:	3204      	adds	r2, #4

0800048e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800048e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000490:	d3fb      	bcc.n	800048a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000492:	f7ff ffd7 	bl	8000444 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000496:	f002 fcd3 	bl	8002e40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800049a:	f7ff ff11 	bl	80002c0 <main>
  bx  lr    
 800049e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80004a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004a8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80004ac:	08002ecc 	.word	0x08002ecc
  ldr r2, =_sbss
 80004b0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80004b4:	20000384 	.word	0x20000384

080004b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80004b8:	e7fe      	b.n	80004b8 <ADC_IRQHandler>
	...

080004bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004c0:	4b0e      	ldr	r3, [pc, #56]	; (80004fc <HAL_Init+0x40>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a0d      	ldr	r2, [pc, #52]	; (80004fc <HAL_Init+0x40>)
 80004c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004cc:	4b0b      	ldr	r3, [pc, #44]	; (80004fc <HAL_Init+0x40>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a0a      	ldr	r2, [pc, #40]	; (80004fc <HAL_Init+0x40>)
 80004d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004d8:	4b08      	ldr	r3, [pc, #32]	; (80004fc <HAL_Init+0x40>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a07      	ldr	r2, [pc, #28]	; (80004fc <HAL_Init+0x40>)
 80004de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004e4:	2003      	movs	r0, #3
 80004e6:	f000 f931 	bl	800074c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004ea:	2000      	movs	r0, #0
 80004ec:	f000 f808 	bl	8000500 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004f0:	f7ff ff04 	bl	80002fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004f4:	2300      	movs	r3, #0
}
 80004f6:	4618      	mov	r0, r3
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	40023c00 	.word	0x40023c00

08000500 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000508:	4b12      	ldr	r3, [pc, #72]	; (8000554 <HAL_InitTick+0x54>)
 800050a:	681a      	ldr	r2, [r3, #0]
 800050c:	4b12      	ldr	r3, [pc, #72]	; (8000558 <HAL_InitTick+0x58>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	4619      	mov	r1, r3
 8000512:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000516:	fbb3 f3f1 	udiv	r3, r3, r1
 800051a:	fbb2 f3f3 	udiv	r3, r2, r3
 800051e:	4618      	mov	r0, r3
 8000520:	f000 f93b 	bl	800079a <HAL_SYSTICK_Config>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800052a:	2301      	movs	r3, #1
 800052c:	e00e      	b.n	800054c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	2b0f      	cmp	r3, #15
 8000532:	d80a      	bhi.n	800054a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000534:	2200      	movs	r2, #0
 8000536:	6879      	ldr	r1, [r7, #4]
 8000538:	f04f 30ff 	mov.w	r0, #4294967295
 800053c:	f000 f911 	bl	8000762 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000540:	4a06      	ldr	r2, [pc, #24]	; (800055c <HAL_InitTick+0x5c>)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000546:	2300      	movs	r3, #0
 8000548:	e000      	b.n	800054c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800054a:	2301      	movs	r3, #1
}
 800054c:	4618      	mov	r0, r3
 800054e:	3708      	adds	r7, #8
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	20000000 	.word	0x20000000
 8000558:	20000008 	.word	0x20000008
 800055c:	20000004 	.word	0x20000004

08000560 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000564:	4b06      	ldr	r3, [pc, #24]	; (8000580 <HAL_IncTick+0x20>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	461a      	mov	r2, r3
 800056a:	4b06      	ldr	r3, [pc, #24]	; (8000584 <HAL_IncTick+0x24>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4413      	add	r3, r2
 8000570:	4a04      	ldr	r2, [pc, #16]	; (8000584 <HAL_IncTick+0x24>)
 8000572:	6013      	str	r3, [r2, #0]
}
 8000574:	bf00      	nop
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	20000008 	.word	0x20000008
 8000584:	2000007c 	.word	0x2000007c

08000588 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  return uwTick;
 800058c:	4b03      	ldr	r3, [pc, #12]	; (800059c <HAL_GetTick+0x14>)
 800058e:	681b      	ldr	r3, [r3, #0]
}
 8000590:	4618      	mov	r0, r3
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	2000007c 	.word	0x2000007c

080005a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005a8:	f7ff ffee 	bl	8000588 <HAL_GetTick>
 80005ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005b8:	d005      	beq.n	80005c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005ba:	4b0a      	ldr	r3, [pc, #40]	; (80005e4 <HAL_Delay+0x44>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	461a      	mov	r2, r3
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	4413      	add	r3, r2
 80005c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005c6:	bf00      	nop
 80005c8:	f7ff ffde 	bl	8000588 <HAL_GetTick>
 80005cc:	4602      	mov	r2, r0
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	1ad3      	subs	r3, r2, r3
 80005d2:	68fa      	ldr	r2, [r7, #12]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	d8f7      	bhi.n	80005c8 <HAL_Delay+0x28>
  {
  }
}
 80005d8:	bf00      	nop
 80005da:	bf00      	nop
 80005dc:	3710      	adds	r7, #16
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20000008 	.word	0x20000008

080005e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	f003 0307 	and.w	r3, r3, #7
 80005f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005f8:	4b0c      	ldr	r3, [pc, #48]	; (800062c <__NVIC_SetPriorityGrouping+0x44>)
 80005fa:	68db      	ldr	r3, [r3, #12]
 80005fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005fe:	68ba      	ldr	r2, [r7, #8]
 8000600:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000604:	4013      	ands	r3, r2
 8000606:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000610:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000618:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800061a:	4a04      	ldr	r2, [pc, #16]	; (800062c <__NVIC_SetPriorityGrouping+0x44>)
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	60d3      	str	r3, [r2, #12]
}
 8000620:	bf00      	nop
 8000622:	3714      	adds	r7, #20
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr
 800062c:	e000ed00 	.word	0xe000ed00

08000630 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000634:	4b04      	ldr	r3, [pc, #16]	; (8000648 <__NVIC_GetPriorityGrouping+0x18>)
 8000636:	68db      	ldr	r3, [r3, #12]
 8000638:	0a1b      	lsrs	r3, r3, #8
 800063a:	f003 0307 	and.w	r3, r3, #7
}
 800063e:	4618      	mov	r0, r3
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr
 8000648:	e000ed00 	.word	0xe000ed00

0800064c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	6039      	str	r1, [r7, #0]
 8000656:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800065c:	2b00      	cmp	r3, #0
 800065e:	db0a      	blt.n	8000676 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	b2da      	uxtb	r2, r3
 8000664:	490c      	ldr	r1, [pc, #48]	; (8000698 <__NVIC_SetPriority+0x4c>)
 8000666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066a:	0112      	lsls	r2, r2, #4
 800066c:	b2d2      	uxtb	r2, r2
 800066e:	440b      	add	r3, r1
 8000670:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000674:	e00a      	b.n	800068c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	b2da      	uxtb	r2, r3
 800067a:	4908      	ldr	r1, [pc, #32]	; (800069c <__NVIC_SetPriority+0x50>)
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	f003 030f 	and.w	r3, r3, #15
 8000682:	3b04      	subs	r3, #4
 8000684:	0112      	lsls	r2, r2, #4
 8000686:	b2d2      	uxtb	r2, r2
 8000688:	440b      	add	r3, r1
 800068a:	761a      	strb	r2, [r3, #24]
}
 800068c:	bf00      	nop
 800068e:	370c      	adds	r7, #12
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	e000e100 	.word	0xe000e100
 800069c:	e000ed00 	.word	0xe000ed00

080006a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b089      	sub	sp, #36	; 0x24
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	60f8      	str	r0, [r7, #12]
 80006a8:	60b9      	str	r1, [r7, #8]
 80006aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	f003 0307 	and.w	r3, r3, #7
 80006b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006b4:	69fb      	ldr	r3, [r7, #28]
 80006b6:	f1c3 0307 	rsb	r3, r3, #7
 80006ba:	2b04      	cmp	r3, #4
 80006bc:	bf28      	it	cs
 80006be:	2304      	movcs	r3, #4
 80006c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006c2:	69fb      	ldr	r3, [r7, #28]
 80006c4:	3304      	adds	r3, #4
 80006c6:	2b06      	cmp	r3, #6
 80006c8:	d902      	bls.n	80006d0 <NVIC_EncodePriority+0x30>
 80006ca:	69fb      	ldr	r3, [r7, #28]
 80006cc:	3b03      	subs	r3, #3
 80006ce:	e000      	b.n	80006d2 <NVIC_EncodePriority+0x32>
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d4:	f04f 32ff 	mov.w	r2, #4294967295
 80006d8:	69bb      	ldr	r3, [r7, #24]
 80006da:	fa02 f303 	lsl.w	r3, r2, r3
 80006de:	43da      	mvns	r2, r3
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	401a      	ands	r2, r3
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006e8:	f04f 31ff 	mov.w	r1, #4294967295
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	fa01 f303 	lsl.w	r3, r1, r3
 80006f2:	43d9      	mvns	r1, r3
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f8:	4313      	orrs	r3, r2
         );
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3724      	adds	r7, #36	; 0x24
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
	...

08000708 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	3b01      	subs	r3, #1
 8000714:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000718:	d301      	bcc.n	800071e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800071a:	2301      	movs	r3, #1
 800071c:	e00f      	b.n	800073e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800071e:	4a0a      	ldr	r2, [pc, #40]	; (8000748 <SysTick_Config+0x40>)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	3b01      	subs	r3, #1
 8000724:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000726:	210f      	movs	r1, #15
 8000728:	f04f 30ff 	mov.w	r0, #4294967295
 800072c:	f7ff ff8e 	bl	800064c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000730:	4b05      	ldr	r3, [pc, #20]	; (8000748 <SysTick_Config+0x40>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000736:	4b04      	ldr	r3, [pc, #16]	; (8000748 <SysTick_Config+0x40>)
 8000738:	2207      	movs	r2, #7
 800073a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800073c:	2300      	movs	r3, #0
}
 800073e:	4618      	mov	r0, r3
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	e000e010 	.word	0xe000e010

0800074c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000754:	6878      	ldr	r0, [r7, #4]
 8000756:	f7ff ff47 	bl	80005e8 <__NVIC_SetPriorityGrouping>
}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}

08000762 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000762:	b580      	push	{r7, lr}
 8000764:	b086      	sub	sp, #24
 8000766:	af00      	add	r7, sp, #0
 8000768:	4603      	mov	r3, r0
 800076a:	60b9      	str	r1, [r7, #8]
 800076c:	607a      	str	r2, [r7, #4]
 800076e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000774:	f7ff ff5c 	bl	8000630 <__NVIC_GetPriorityGrouping>
 8000778:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800077a:	687a      	ldr	r2, [r7, #4]
 800077c:	68b9      	ldr	r1, [r7, #8]
 800077e:	6978      	ldr	r0, [r7, #20]
 8000780:	f7ff ff8e 	bl	80006a0 <NVIC_EncodePriority>
 8000784:	4602      	mov	r2, r0
 8000786:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800078a:	4611      	mov	r1, r2
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff ff5d 	bl	800064c <__NVIC_SetPriority>
}
 8000792:	bf00      	nop
 8000794:	3718      	adds	r7, #24
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}

0800079a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800079a:	b580      	push	{r7, lr}
 800079c:	b082      	sub	sp, #8
 800079e:	af00      	add	r7, sp, #0
 80007a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007a2:	6878      	ldr	r0, [r7, #4]
 80007a4:	f7ff ffb0 	bl	8000708 <SysTick_Config>
 80007a8:	4603      	mov	r3, r0
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
	...

080007b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b089      	sub	sp, #36	; 0x24
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80007be:	2300      	movs	r3, #0
 80007c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80007c2:	2300      	movs	r3, #0
 80007c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80007c6:	2300      	movs	r3, #0
 80007c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007ca:	2300      	movs	r3, #0
 80007cc:	61fb      	str	r3, [r7, #28]
 80007ce:	e16b      	b.n	8000aa8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80007d0:	2201      	movs	r2, #1
 80007d2:	69fb      	ldr	r3, [r7, #28]
 80007d4:	fa02 f303 	lsl.w	r3, r2, r3
 80007d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	697a      	ldr	r2, [r7, #20]
 80007e0:	4013      	ands	r3, r2
 80007e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80007e4:	693a      	ldr	r2, [r7, #16]
 80007e6:	697b      	ldr	r3, [r7, #20]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	f040 815a 	bne.w	8000aa2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	685b      	ldr	r3, [r3, #4]
 80007f2:	f003 0303 	and.w	r3, r3, #3
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	d005      	beq.n	8000806 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	685b      	ldr	r3, [r3, #4]
 80007fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000802:	2b02      	cmp	r3, #2
 8000804:	d130      	bne.n	8000868 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	689b      	ldr	r3, [r3, #8]
 800080a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800080c:	69fb      	ldr	r3, [r7, #28]
 800080e:	005b      	lsls	r3, r3, #1
 8000810:	2203      	movs	r2, #3
 8000812:	fa02 f303 	lsl.w	r3, r2, r3
 8000816:	43db      	mvns	r3, r3
 8000818:	69ba      	ldr	r2, [r7, #24]
 800081a:	4013      	ands	r3, r2
 800081c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	68da      	ldr	r2, [r3, #12]
 8000822:	69fb      	ldr	r3, [r7, #28]
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	fa02 f303 	lsl.w	r3, r2, r3
 800082a:	69ba      	ldr	r2, [r7, #24]
 800082c:	4313      	orrs	r3, r2
 800082e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	69ba      	ldr	r2, [r7, #24]
 8000834:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800083c:	2201      	movs	r2, #1
 800083e:	69fb      	ldr	r3, [r7, #28]
 8000840:	fa02 f303 	lsl.w	r3, r2, r3
 8000844:	43db      	mvns	r3, r3
 8000846:	69ba      	ldr	r2, [r7, #24]
 8000848:	4013      	ands	r3, r2
 800084a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	685b      	ldr	r3, [r3, #4]
 8000850:	091b      	lsrs	r3, r3, #4
 8000852:	f003 0201 	and.w	r2, r3, #1
 8000856:	69fb      	ldr	r3, [r7, #28]
 8000858:	fa02 f303 	lsl.w	r3, r2, r3
 800085c:	69ba      	ldr	r2, [r7, #24]
 800085e:	4313      	orrs	r3, r2
 8000860:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	69ba      	ldr	r2, [r7, #24]
 8000866:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	f003 0303 	and.w	r3, r3, #3
 8000870:	2b03      	cmp	r3, #3
 8000872:	d017      	beq.n	80008a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	68db      	ldr	r3, [r3, #12]
 8000878:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800087a:	69fb      	ldr	r3, [r7, #28]
 800087c:	005b      	lsls	r3, r3, #1
 800087e:	2203      	movs	r2, #3
 8000880:	fa02 f303 	lsl.w	r3, r2, r3
 8000884:	43db      	mvns	r3, r3
 8000886:	69ba      	ldr	r2, [r7, #24]
 8000888:	4013      	ands	r3, r2
 800088a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	689a      	ldr	r2, [r3, #8]
 8000890:	69fb      	ldr	r3, [r7, #28]
 8000892:	005b      	lsls	r3, r3, #1
 8000894:	fa02 f303 	lsl.w	r3, r2, r3
 8000898:	69ba      	ldr	r2, [r7, #24]
 800089a:	4313      	orrs	r3, r2
 800089c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	69ba      	ldr	r2, [r7, #24]
 80008a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	f003 0303 	and.w	r3, r3, #3
 80008ac:	2b02      	cmp	r3, #2
 80008ae:	d123      	bne.n	80008f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80008b0:	69fb      	ldr	r3, [r7, #28]
 80008b2:	08da      	lsrs	r2, r3, #3
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	3208      	adds	r2, #8
 80008b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	f003 0307 	and.w	r3, r3, #7
 80008c4:	009b      	lsls	r3, r3, #2
 80008c6:	220f      	movs	r2, #15
 80008c8:	fa02 f303 	lsl.w	r3, r2, r3
 80008cc:	43db      	mvns	r3, r3
 80008ce:	69ba      	ldr	r2, [r7, #24]
 80008d0:	4013      	ands	r3, r2
 80008d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	691a      	ldr	r2, [r3, #16]
 80008d8:	69fb      	ldr	r3, [r7, #28]
 80008da:	f003 0307 	and.w	r3, r3, #7
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	fa02 f303 	lsl.w	r3, r2, r3
 80008e4:	69ba      	ldr	r2, [r7, #24]
 80008e6:	4313      	orrs	r3, r2
 80008e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80008ea:	69fb      	ldr	r3, [r7, #28]
 80008ec:	08da      	lsrs	r2, r3, #3
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	3208      	adds	r2, #8
 80008f2:	69b9      	ldr	r1, [r7, #24]
 80008f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008fe:	69fb      	ldr	r3, [r7, #28]
 8000900:	005b      	lsls	r3, r3, #1
 8000902:	2203      	movs	r2, #3
 8000904:	fa02 f303 	lsl.w	r3, r2, r3
 8000908:	43db      	mvns	r3, r3
 800090a:	69ba      	ldr	r2, [r7, #24]
 800090c:	4013      	ands	r3, r2
 800090e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	f003 0203 	and.w	r2, r3, #3
 8000918:	69fb      	ldr	r3, [r7, #28]
 800091a:	005b      	lsls	r3, r3, #1
 800091c:	fa02 f303 	lsl.w	r3, r2, r3
 8000920:	69ba      	ldr	r2, [r7, #24]
 8000922:	4313      	orrs	r3, r2
 8000924:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	69ba      	ldr	r2, [r7, #24]
 800092a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000934:	2b00      	cmp	r3, #0
 8000936:	f000 80b4 	beq.w	8000aa2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	4b60      	ldr	r3, [pc, #384]	; (8000ac0 <HAL_GPIO_Init+0x30c>)
 8000940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000942:	4a5f      	ldr	r2, [pc, #380]	; (8000ac0 <HAL_GPIO_Init+0x30c>)
 8000944:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000948:	6453      	str	r3, [r2, #68]	; 0x44
 800094a:	4b5d      	ldr	r3, [pc, #372]	; (8000ac0 <HAL_GPIO_Init+0x30c>)
 800094c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000956:	4a5b      	ldr	r2, [pc, #364]	; (8000ac4 <HAL_GPIO_Init+0x310>)
 8000958:	69fb      	ldr	r3, [r7, #28]
 800095a:	089b      	lsrs	r3, r3, #2
 800095c:	3302      	adds	r3, #2
 800095e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000962:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000964:	69fb      	ldr	r3, [r7, #28]
 8000966:	f003 0303 	and.w	r3, r3, #3
 800096a:	009b      	lsls	r3, r3, #2
 800096c:	220f      	movs	r2, #15
 800096e:	fa02 f303 	lsl.w	r3, r2, r3
 8000972:	43db      	mvns	r3, r3
 8000974:	69ba      	ldr	r2, [r7, #24]
 8000976:	4013      	ands	r3, r2
 8000978:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4a52      	ldr	r2, [pc, #328]	; (8000ac8 <HAL_GPIO_Init+0x314>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d02b      	beq.n	80009da <HAL_GPIO_Init+0x226>
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4a51      	ldr	r2, [pc, #324]	; (8000acc <HAL_GPIO_Init+0x318>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d025      	beq.n	80009d6 <HAL_GPIO_Init+0x222>
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4a50      	ldr	r2, [pc, #320]	; (8000ad0 <HAL_GPIO_Init+0x31c>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d01f      	beq.n	80009d2 <HAL_GPIO_Init+0x21e>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4a4f      	ldr	r2, [pc, #316]	; (8000ad4 <HAL_GPIO_Init+0x320>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d019      	beq.n	80009ce <HAL_GPIO_Init+0x21a>
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4a4e      	ldr	r2, [pc, #312]	; (8000ad8 <HAL_GPIO_Init+0x324>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d013      	beq.n	80009ca <HAL_GPIO_Init+0x216>
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4a4d      	ldr	r2, [pc, #308]	; (8000adc <HAL_GPIO_Init+0x328>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d00d      	beq.n	80009c6 <HAL_GPIO_Init+0x212>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4a4c      	ldr	r2, [pc, #304]	; (8000ae0 <HAL_GPIO_Init+0x32c>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d007      	beq.n	80009c2 <HAL_GPIO_Init+0x20e>
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4a4b      	ldr	r2, [pc, #300]	; (8000ae4 <HAL_GPIO_Init+0x330>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d101      	bne.n	80009be <HAL_GPIO_Init+0x20a>
 80009ba:	2307      	movs	r3, #7
 80009bc:	e00e      	b.n	80009dc <HAL_GPIO_Init+0x228>
 80009be:	2308      	movs	r3, #8
 80009c0:	e00c      	b.n	80009dc <HAL_GPIO_Init+0x228>
 80009c2:	2306      	movs	r3, #6
 80009c4:	e00a      	b.n	80009dc <HAL_GPIO_Init+0x228>
 80009c6:	2305      	movs	r3, #5
 80009c8:	e008      	b.n	80009dc <HAL_GPIO_Init+0x228>
 80009ca:	2304      	movs	r3, #4
 80009cc:	e006      	b.n	80009dc <HAL_GPIO_Init+0x228>
 80009ce:	2303      	movs	r3, #3
 80009d0:	e004      	b.n	80009dc <HAL_GPIO_Init+0x228>
 80009d2:	2302      	movs	r3, #2
 80009d4:	e002      	b.n	80009dc <HAL_GPIO_Init+0x228>
 80009d6:	2301      	movs	r3, #1
 80009d8:	e000      	b.n	80009dc <HAL_GPIO_Init+0x228>
 80009da:	2300      	movs	r3, #0
 80009dc:	69fa      	ldr	r2, [r7, #28]
 80009de:	f002 0203 	and.w	r2, r2, #3
 80009e2:	0092      	lsls	r2, r2, #2
 80009e4:	4093      	lsls	r3, r2
 80009e6:	69ba      	ldr	r2, [r7, #24]
 80009e8:	4313      	orrs	r3, r2
 80009ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80009ec:	4935      	ldr	r1, [pc, #212]	; (8000ac4 <HAL_GPIO_Init+0x310>)
 80009ee:	69fb      	ldr	r3, [r7, #28]
 80009f0:	089b      	lsrs	r3, r3, #2
 80009f2:	3302      	adds	r3, #2
 80009f4:	69ba      	ldr	r2, [r7, #24]
 80009f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80009fa:	4b3b      	ldr	r3, [pc, #236]	; (8000ae8 <HAL_GPIO_Init+0x334>)
 80009fc:	689b      	ldr	r3, [r3, #8]
 80009fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a00:	693b      	ldr	r3, [r7, #16]
 8000a02:	43db      	mvns	r3, r3
 8000a04:	69ba      	ldr	r2, [r7, #24]
 8000a06:	4013      	ands	r3, r2
 8000a08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d003      	beq.n	8000a1e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000a16:	69ba      	ldr	r2, [r7, #24]
 8000a18:	693b      	ldr	r3, [r7, #16]
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a1e:	4a32      	ldr	r2, [pc, #200]	; (8000ae8 <HAL_GPIO_Init+0x334>)
 8000a20:	69bb      	ldr	r3, [r7, #24]
 8000a22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a24:	4b30      	ldr	r3, [pc, #192]	; (8000ae8 <HAL_GPIO_Init+0x334>)
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a2a:	693b      	ldr	r3, [r7, #16]
 8000a2c:	43db      	mvns	r3, r3
 8000a2e:	69ba      	ldr	r2, [r7, #24]
 8000a30:	4013      	ands	r3, r2
 8000a32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d003      	beq.n	8000a48 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000a40:	69ba      	ldr	r2, [r7, #24]
 8000a42:	693b      	ldr	r3, [r7, #16]
 8000a44:	4313      	orrs	r3, r2
 8000a46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000a48:	4a27      	ldr	r2, [pc, #156]	; (8000ae8 <HAL_GPIO_Init+0x334>)
 8000a4a:	69bb      	ldr	r3, [r7, #24]
 8000a4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000a4e:	4b26      	ldr	r3, [pc, #152]	; (8000ae8 <HAL_GPIO_Init+0x334>)
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a54:	693b      	ldr	r3, [r7, #16]
 8000a56:	43db      	mvns	r3, r3
 8000a58:	69ba      	ldr	r2, [r7, #24]
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d003      	beq.n	8000a72 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000a6a:	69ba      	ldr	r2, [r7, #24]
 8000a6c:	693b      	ldr	r3, [r7, #16]
 8000a6e:	4313      	orrs	r3, r2
 8000a70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a72:	4a1d      	ldr	r2, [pc, #116]	; (8000ae8 <HAL_GPIO_Init+0x334>)
 8000a74:	69bb      	ldr	r3, [r7, #24]
 8000a76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a78:	4b1b      	ldr	r3, [pc, #108]	; (8000ae8 <HAL_GPIO_Init+0x334>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a7e:	693b      	ldr	r3, [r7, #16]
 8000a80:	43db      	mvns	r3, r3
 8000a82:	69ba      	ldr	r2, [r7, #24]
 8000a84:	4013      	ands	r3, r2
 8000a86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d003      	beq.n	8000a9c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000a94:	69ba      	ldr	r2, [r7, #24]
 8000a96:	693b      	ldr	r3, [r7, #16]
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a9c:	4a12      	ldr	r2, [pc, #72]	; (8000ae8 <HAL_GPIO_Init+0x334>)
 8000a9e:	69bb      	ldr	r3, [r7, #24]
 8000aa0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000aa2:	69fb      	ldr	r3, [r7, #28]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	61fb      	str	r3, [r7, #28]
 8000aa8:	69fb      	ldr	r3, [r7, #28]
 8000aaa:	2b0f      	cmp	r3, #15
 8000aac:	f67f ae90 	bls.w	80007d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ab0:	bf00      	nop
 8000ab2:	bf00      	nop
 8000ab4:	3724      	adds	r7, #36	; 0x24
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40013800 	.word	0x40013800
 8000ac8:	40020000 	.word	0x40020000
 8000acc:	40020400 	.word	0x40020400
 8000ad0:	40020800 	.word	0x40020800
 8000ad4:	40020c00 	.word	0x40020c00
 8000ad8:	40021000 	.word	0x40021000
 8000adc:	40021400 	.word	0x40021400
 8000ae0:	40021800 	.word	0x40021800
 8000ae4:	40021c00 	.word	0x40021c00
 8000ae8:	40013c00 	.word	0x40013c00

08000aec <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000afa:	693b      	ldr	r3, [r7, #16]
 8000afc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4618      	mov	r0, r3
 8000b04:	f001 fe7b 	bl	80027fe <USB_GetMode>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	f040 80f6 	bne.w	8000cfc <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4618      	mov	r0, r3
 8000b16:	f001 fe5f 	bl	80027d8 <USB_ReadInterrupts>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	f000 80ec 	beq.w	8000cfa <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4618      	mov	r0, r3
 8000b28:	f001 fe56 	bl	80027d8 <USB_ReadInterrupts>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000b36:	d104      	bne.n	8000b42 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000b40:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4618      	mov	r0, r3
 8000b48:	f001 fe46 	bl	80027d8 <USB_ReadInterrupts>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000b56:	d104      	bne.n	8000b62 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000b60:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4618      	mov	r0, r3
 8000b68:	f001 fe36 	bl	80027d8 <USB_ReadInterrupts>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000b76:	d104      	bne.n	8000b82 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000b80:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4618      	mov	r0, r3
 8000b88:	f001 fe26 	bl	80027d8 <USB_ReadInterrupts>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	f003 0302 	and.w	r3, r3, #2
 8000b92:	2b02      	cmp	r3, #2
 8000b94:	d103      	bne.n	8000b9e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	2202      	movs	r2, #2
 8000b9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f001 fe18 	bl	80027d8 <USB_ReadInterrupts>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000bae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000bb2:	d11c      	bne.n	8000bee <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000bbc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d10f      	bne.n	8000bee <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8000bce:	2110      	movs	r1, #16
 8000bd0:	6938      	ldr	r0, [r7, #16]
 8000bd2:	f001 fd45 	bl	8002660 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8000bd6:	6938      	ldr	r0, [r7, #16]
 8000bd8:	f001 fd76 	bl	80026c8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2101      	movs	r1, #1
 8000be2:	4618      	mov	r0, r3
 8000be4:	f001 fe19 	bl	800281a <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8000be8:	6878      	ldr	r0, [r7, #4]
 8000bea:	f002 f8aa 	bl	8002d42 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f001 fdf0 	bl	80027d8 <USB_ReadInterrupts>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000bfe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c02:	d102      	bne.n	8000c0a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8000c04:	6878      	ldr	r0, [r7, #4]
 8000c06:	f001 f829 	bl	8001c5c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f001 fde2 	bl	80027d8 <USB_ReadInterrupts>
 8000c14:	4603      	mov	r3, r0
 8000c16:	f003 0308 	and.w	r3, r3, #8
 8000c1a:	2b08      	cmp	r3, #8
 8000c1c:	d106      	bne.n	8000c2c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	f002 f873 	bl	8002d0a <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2208      	movs	r2, #8
 8000c2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4618      	mov	r0, r3
 8000c32:	f001 fdd1 	bl	80027d8 <USB_ReadInterrupts>
 8000c36:	4603      	mov	r3, r0
 8000c38:	f003 0310 	and.w	r3, r3, #16
 8000c3c:	2b10      	cmp	r3, #16
 8000c3e:	d101      	bne.n	8000c44 <HAL_HCD_IRQHandler+0x158>
 8000c40:	2301      	movs	r3, #1
 8000c42:	e000      	b.n	8000c46 <HAL_HCD_IRQHandler+0x15a>
 8000c44:	2300      	movs	r3, #0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d012      	beq.n	8000c70 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	699a      	ldr	r2, [r3, #24]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f022 0210 	bic.w	r2, r2, #16
 8000c58:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	f000 ff2c 	bl	8001ab8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	699a      	ldr	r2, [r3, #24]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f042 0210 	orr.w	r2, r2, #16
 8000c6e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4618      	mov	r0, r3
 8000c76:	f001 fdaf 	bl	80027d8 <USB_ReadInterrupts>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000c84:	d13a      	bne.n	8000cfc <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f001 fdff 	bl	800288e <USB_HC_ReadInterrupt>
 8000c90:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8000c92:	2300      	movs	r3, #0
 8000c94:	617b      	str	r3, [r7, #20]
 8000c96:	e025      	b.n	8000ce4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	f003 030f 	and.w	r3, r3, #15
 8000c9e:	68ba      	ldr	r2, [r7, #8]
 8000ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ca4:	f003 0301 	and.w	r3, r3, #1
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d018      	beq.n	8000cde <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	015a      	lsls	r2, r3, #5
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000cc2:	d106      	bne.n	8000cd2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	4619      	mov	r1, r3
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f000 f836 	bl	8000d3c <HCD_HC_IN_IRQHandler>
 8000cd0:	e005      	b.n	8000cde <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	f000 fb84 	bl	80013e6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	617b      	str	r3, [r7, #20]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	689b      	ldr	r3, [r3, #8]
 8000ce8:	697a      	ldr	r2, [r7, #20]
 8000cea:	429a      	cmp	r2, r3
 8000cec:	d3d4      	bcc.n	8000c98 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000cf6:	615a      	str	r2, [r3, #20]
 8000cf8:	e000      	b.n	8000cfc <HAL_HCD_IRQHandler+0x210>
      return;
 8000cfa:	bf00      	nop
    }
  }
}
 8000cfc:	3718      	adds	r7, #24
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b082      	sub	sp, #8
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d101      	bne.n	8000d18 <HAL_HCD_Stop+0x16>
 8000d14:	2302      	movs	r3, #2
 8000d16:	e00d      	b.n	8000d34 <HAL_HCD_Stop+0x32>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f001 febf 	bl	8002aa8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8000d32:	2300      	movs	r3, #0
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b086      	sub	sp, #24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	460b      	mov	r3, r1
 8000d46:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8000d52:	78fb      	ldrb	r3, [r7, #3]
 8000d54:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	015a      	lsls	r2, r3, #5
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	f003 0304 	and.w	r3, r3, #4
 8000d68:	2b04      	cmp	r3, #4
 8000d6a:	d11a      	bne.n	8000da2 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	015a      	lsls	r2, r3, #5
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	4413      	add	r3, r2
 8000d74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000d78:	461a      	mov	r2, r3
 8000d7a:	2304      	movs	r3, #4
 8000d7c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8000d7e:	687a      	ldr	r2, [r7, #4]
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	212c      	movs	r1, #44	; 0x2c
 8000d84:	fb01 f303 	mul.w	r3, r1, r3
 8000d88:	4413      	add	r3, r2
 8000d8a:	3361      	adds	r3, #97	; 0x61
 8000d8c:	2206      	movs	r2, #6
 8000d8e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	68fa      	ldr	r2, [r7, #12]
 8000d96:	b2d2      	uxtb	r2, r2
 8000d98:	4611      	mov	r1, r2
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f001 fd88 	bl	80028b0 <USB_HC_Halt>
 8000da0:	e0af      	b.n	8000f02 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	015a      	lsls	r2, r3, #5
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	4413      	add	r3, r2
 8000daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000dae:	689b      	ldr	r3, [r3, #8]
 8000db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000db4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000db8:	d11b      	bne.n	8000df2 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	015a      	lsls	r2, r3, #5
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dcc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8000dce:	687a      	ldr	r2, [r7, #4]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	212c      	movs	r1, #44	; 0x2c
 8000dd4:	fb01 f303 	mul.w	r3, r1, r3
 8000dd8:	4413      	add	r3, r2
 8000dda:	3361      	adds	r3, #97	; 0x61
 8000ddc:	2207      	movs	r2, #7
 8000dde:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	68fa      	ldr	r2, [r7, #12]
 8000de6:	b2d2      	uxtb	r2, r2
 8000de8:	4611      	mov	r1, r2
 8000dea:	4618      	mov	r0, r3
 8000dec:	f001 fd60 	bl	80028b0 <USB_HC_Halt>
 8000df0:	e087      	b.n	8000f02 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	015a      	lsls	r2, r3, #5
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	4413      	add	r3, r2
 8000dfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	f003 0320 	and.w	r3, r3, #32
 8000e04:	2b20      	cmp	r3, #32
 8000e06:	d109      	bne.n	8000e1c <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	015a      	lsls	r2, r3, #5
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	4413      	add	r3, r2
 8000e10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e14:	461a      	mov	r2, r3
 8000e16:	2320      	movs	r3, #32
 8000e18:	6093      	str	r3, [r2, #8]
 8000e1a:	e072      	b.n	8000f02 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	015a      	lsls	r2, r3, #5
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	4413      	add	r3, r2
 8000e24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e28:	689b      	ldr	r3, [r3, #8]
 8000e2a:	f003 0308 	and.w	r3, r3, #8
 8000e2e:	2b08      	cmp	r3, #8
 8000e30:	d11a      	bne.n	8000e68 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	015a      	lsls	r2, r3, #5
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	4413      	add	r3, r2
 8000e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e3e:	461a      	mov	r2, r3
 8000e40:	2308      	movs	r3, #8
 8000e42:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8000e44:	687a      	ldr	r2, [r7, #4]
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	212c      	movs	r1, #44	; 0x2c
 8000e4a:	fb01 f303 	mul.w	r3, r1, r3
 8000e4e:	4413      	add	r3, r2
 8000e50:	3361      	adds	r3, #97	; 0x61
 8000e52:	2205      	movs	r2, #5
 8000e54:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	68fa      	ldr	r2, [r7, #12]
 8000e5c:	b2d2      	uxtb	r2, r2
 8000e5e:	4611      	mov	r1, r2
 8000e60:	4618      	mov	r0, r3
 8000e62:	f001 fd25 	bl	80028b0 <USB_HC_Halt>
 8000e66:	e04c      	b.n	8000f02 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	015a      	lsls	r2, r3, #5
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	4413      	add	r3, r2
 8000e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e7e:	d11b      	bne.n	8000eb8 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	015a      	lsls	r2, r3, #5
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	4413      	add	r3, r2
 8000e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e92:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	212c      	movs	r1, #44	; 0x2c
 8000e9a:	fb01 f303 	mul.w	r3, r1, r3
 8000e9e:	4413      	add	r3, r2
 8000ea0:	3361      	adds	r3, #97	; 0x61
 8000ea2:	2208      	movs	r2, #8
 8000ea4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	68fa      	ldr	r2, [r7, #12]
 8000eac:	b2d2      	uxtb	r2, r2
 8000eae:	4611      	mov	r1, r2
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f001 fcfd 	bl	80028b0 <USB_HC_Halt>
 8000eb6:	e024      	b.n	8000f02 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	015a      	lsls	r2, r3, #5
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eca:	2b80      	cmp	r3, #128	; 0x80
 8000ecc:	d119      	bne.n	8000f02 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	015a      	lsls	r2, r3, #5
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000eda:	461a      	mov	r2, r3
 8000edc:	2380      	movs	r3, #128	; 0x80
 8000ede:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	212c      	movs	r1, #44	; 0x2c
 8000ee6:	fb01 f303 	mul.w	r3, r1, r3
 8000eea:	4413      	add	r3, r2
 8000eec:	3361      	adds	r3, #97	; 0x61
 8000eee:	2206      	movs	r2, #6
 8000ef0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	68fa      	ldr	r2, [r7, #12]
 8000ef8:	b2d2      	uxtb	r2, r2
 8000efa:	4611      	mov	r1, r2
 8000efc:	4618      	mov	r0, r3
 8000efe:	f001 fcd7 	bl	80028b0 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	015a      	lsls	r2, r3, #5
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	4413      	add	r3, r2
 8000f0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f18:	d112      	bne.n	8000f40 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	68fa      	ldr	r2, [r7, #12]
 8000f20:	b2d2      	uxtb	r2, r2
 8000f22:	4611      	mov	r1, r2
 8000f24:	4618      	mov	r0, r3
 8000f26:	f001 fcc3 	bl	80028b0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	015a      	lsls	r2, r3, #5
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	4413      	add	r3, r2
 8000f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f36:	461a      	mov	r2, r3
 8000f38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f3c:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8000f3e:	e24e      	b.n	80013de <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	015a      	lsls	r2, r3, #5
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	4413      	add	r3, r2
 8000f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	f040 80df 	bne.w	8001116 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	691b      	ldr	r3, [r3, #16]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d019      	beq.n	8000f94 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	212c      	movs	r1, #44	; 0x2c
 8000f66:	fb01 f303 	mul.w	r3, r1, r3
 8000f6a:	4413      	add	r3, r2
 8000f6c:	3348      	adds	r3, #72	; 0x48
 8000f6e:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	0159      	lsls	r1, r3, #5
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	440b      	add	r3, r1
 8000f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f7c:	691b      	ldr	r3, [r3, #16]
 8000f7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8000f82:	1ad2      	subs	r2, r2, r3
 8000f84:	6879      	ldr	r1, [r7, #4]
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	202c      	movs	r0, #44	; 0x2c
 8000f8a:	fb00 f303 	mul.w	r3, r0, r3
 8000f8e:	440b      	add	r3, r1
 8000f90:	3350      	adds	r3, #80	; 0x50
 8000f92:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	212c      	movs	r1, #44	; 0x2c
 8000f9a:	fb01 f303 	mul.w	r3, r1, r3
 8000f9e:	4413      	add	r3, r2
 8000fa0:	3361      	adds	r3, #97	; 0x61
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	212c      	movs	r1, #44	; 0x2c
 8000fac:	fb01 f303 	mul.w	r3, r1, r3
 8000fb0:	4413      	add	r3, r2
 8000fb2:	335c      	adds	r3, #92	; 0x5c
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	015a      	lsls	r2, r3, #5
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	212c      	movs	r1, #44	; 0x2c
 8000fd0:	fb01 f303 	mul.w	r3, r1, r3
 8000fd4:	4413      	add	r3, r2
 8000fd6:	333f      	adds	r3, #63	; 0x3f
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d009      	beq.n	8000ff2 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	212c      	movs	r1, #44	; 0x2c
 8000fe4:	fb01 f303 	mul.w	r3, r1, r3
 8000fe8:	4413      	add	r3, r2
 8000fea:	333f      	adds	r3, #63	; 0x3f
 8000fec:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d111      	bne.n	8001016 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	68fa      	ldr	r2, [r7, #12]
 8000ff8:	b2d2      	uxtb	r2, r2
 8000ffa:	4611      	mov	r1, r2
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f001 fc57 	bl	80028b0 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	015a      	lsls	r2, r3, #5
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	4413      	add	r3, r2
 800100a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800100e:	461a      	mov	r2, r3
 8001010:	2310      	movs	r3, #16
 8001012:	6093      	str	r3, [r2, #8]
 8001014:	e03a      	b.n	800108c <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	212c      	movs	r1, #44	; 0x2c
 800101c:	fb01 f303 	mul.w	r3, r1, r3
 8001020:	4413      	add	r3, r2
 8001022:	333f      	adds	r3, #63	; 0x3f
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b03      	cmp	r3, #3
 8001028:	d009      	beq.n	800103e <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	212c      	movs	r1, #44	; 0x2c
 8001030:	fb01 f303 	mul.w	r3, r1, r3
 8001034:	4413      	add	r3, r2
 8001036:	333f      	adds	r3, #63	; 0x3f
 8001038:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800103a:	2b01      	cmp	r3, #1
 800103c:	d126      	bne.n	800108c <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	015a      	lsls	r2, r3, #5
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	4413      	add	r3, r2
 8001046:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	68fa      	ldr	r2, [r7, #12]
 800104e:	0151      	lsls	r1, r2, #5
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	440a      	add	r2, r1
 8001054:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001058:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800105c:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	212c      	movs	r1, #44	; 0x2c
 8001064:	fb01 f303 	mul.w	r3, r1, r3
 8001068:	4413      	add	r3, r2
 800106a:	3360      	adds	r3, #96	; 0x60
 800106c:	2201      	movs	r2, #1
 800106e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	b2d9      	uxtb	r1, r3
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	202c      	movs	r0, #44	; 0x2c
 800107a:	fb00 f303 	mul.w	r3, r0, r3
 800107e:	4413      	add	r3, r2
 8001080:	3360      	adds	r3, #96	; 0x60
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	461a      	mov	r2, r3
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f001 fe69 	bl	8002d5e <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	691b      	ldr	r3, [r3, #16]
 8001090:	2b01      	cmp	r3, #1
 8001092:	d12b      	bne.n	80010ec <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	212c      	movs	r1, #44	; 0x2c
 800109a:	fb01 f303 	mul.w	r3, r1, r3
 800109e:	4413      	add	r3, r2
 80010a0:	3348      	adds	r3, #72	; 0x48
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	6879      	ldr	r1, [r7, #4]
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	202c      	movs	r0, #44	; 0x2c
 80010aa:	fb00 f202 	mul.w	r2, r0, r2
 80010ae:	440a      	add	r2, r1
 80010b0:	3240      	adds	r2, #64	; 0x40
 80010b2:	8812      	ldrh	r2, [r2, #0]
 80010b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80010b8:	f003 0301 	and.w	r3, r3, #1
 80010bc:	2b00      	cmp	r3, #0
 80010be:	f000 818e 	beq.w	80013de <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	212c      	movs	r1, #44	; 0x2c
 80010c8:	fb01 f303 	mul.w	r3, r1, r3
 80010cc:	4413      	add	r3, r2
 80010ce:	3354      	adds	r3, #84	; 0x54
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	f083 0301 	eor.w	r3, r3, #1
 80010d6:	b2d8      	uxtb	r0, r3
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	212c      	movs	r1, #44	; 0x2c
 80010de:	fb01 f303 	mul.w	r3, r1, r3
 80010e2:	4413      	add	r3, r2
 80010e4:	3354      	adds	r3, #84	; 0x54
 80010e6:	4602      	mov	r2, r0
 80010e8:	701a      	strb	r2, [r3, #0]
}
 80010ea:	e178      	b.n	80013de <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80010ec:	687a      	ldr	r2, [r7, #4]
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	212c      	movs	r1, #44	; 0x2c
 80010f2:	fb01 f303 	mul.w	r3, r1, r3
 80010f6:	4413      	add	r3, r2
 80010f8:	3354      	adds	r3, #84	; 0x54
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	f083 0301 	eor.w	r3, r3, #1
 8001100:	b2d8      	uxtb	r0, r3
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	212c      	movs	r1, #44	; 0x2c
 8001108:	fb01 f303 	mul.w	r3, r1, r3
 800110c:	4413      	add	r3, r2
 800110e:	3354      	adds	r3, #84	; 0x54
 8001110:	4602      	mov	r2, r0
 8001112:	701a      	strb	r2, [r3, #0]
}
 8001114:	e163      	b.n	80013de <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	015a      	lsls	r2, r3, #5
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	4413      	add	r3, r2
 800111e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	f003 0302 	and.w	r3, r3, #2
 8001128:	2b02      	cmp	r3, #2
 800112a:	f040 80f6 	bne.w	800131a <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	212c      	movs	r1, #44	; 0x2c
 8001134:	fb01 f303 	mul.w	r3, r1, r3
 8001138:	4413      	add	r3, r2
 800113a:	3361      	adds	r3, #97	; 0x61
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d109      	bne.n	8001156 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	212c      	movs	r1, #44	; 0x2c
 8001148:	fb01 f303 	mul.w	r3, r1, r3
 800114c:	4413      	add	r3, r2
 800114e:	3360      	adds	r3, #96	; 0x60
 8001150:	2201      	movs	r2, #1
 8001152:	701a      	strb	r2, [r3, #0]
 8001154:	e0c9      	b.n	80012ea <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	212c      	movs	r1, #44	; 0x2c
 800115c:	fb01 f303 	mul.w	r3, r1, r3
 8001160:	4413      	add	r3, r2
 8001162:	3361      	adds	r3, #97	; 0x61
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	2b05      	cmp	r3, #5
 8001168:	d109      	bne.n	800117e <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	212c      	movs	r1, #44	; 0x2c
 8001170:	fb01 f303 	mul.w	r3, r1, r3
 8001174:	4413      	add	r3, r2
 8001176:	3360      	adds	r3, #96	; 0x60
 8001178:	2205      	movs	r2, #5
 800117a:	701a      	strb	r2, [r3, #0]
 800117c:	e0b5      	b.n	80012ea <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	212c      	movs	r1, #44	; 0x2c
 8001184:	fb01 f303 	mul.w	r3, r1, r3
 8001188:	4413      	add	r3, r2
 800118a:	3361      	adds	r3, #97	; 0x61
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	2b06      	cmp	r3, #6
 8001190:	d009      	beq.n	80011a6 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	212c      	movs	r1, #44	; 0x2c
 8001198:	fb01 f303 	mul.w	r3, r1, r3
 800119c:	4413      	add	r3, r2
 800119e:	3361      	adds	r3, #97	; 0x61
 80011a0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80011a2:	2b08      	cmp	r3, #8
 80011a4:	d150      	bne.n	8001248 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	212c      	movs	r1, #44	; 0x2c
 80011ac:	fb01 f303 	mul.w	r3, r1, r3
 80011b0:	4413      	add	r3, r2
 80011b2:	335c      	adds	r3, #92	; 0x5c
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	1c5a      	adds	r2, r3, #1
 80011b8:	6879      	ldr	r1, [r7, #4]
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	202c      	movs	r0, #44	; 0x2c
 80011be:	fb00 f303 	mul.w	r3, r0, r3
 80011c2:	440b      	add	r3, r1
 80011c4:	335c      	adds	r3, #92	; 0x5c
 80011c6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	212c      	movs	r1, #44	; 0x2c
 80011ce:	fb01 f303 	mul.w	r3, r1, r3
 80011d2:	4413      	add	r3, r2
 80011d4:	335c      	adds	r3, #92	; 0x5c
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d912      	bls.n	8001202 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	212c      	movs	r1, #44	; 0x2c
 80011e2:	fb01 f303 	mul.w	r3, r1, r3
 80011e6:	4413      	add	r3, r2
 80011e8:	335c      	adds	r3, #92	; 0x5c
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	212c      	movs	r1, #44	; 0x2c
 80011f4:	fb01 f303 	mul.w	r3, r1, r3
 80011f8:	4413      	add	r3, r2
 80011fa:	3360      	adds	r3, #96	; 0x60
 80011fc:	2204      	movs	r2, #4
 80011fe:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001200:	e073      	b.n	80012ea <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	212c      	movs	r1, #44	; 0x2c
 8001208:	fb01 f303 	mul.w	r3, r1, r3
 800120c:	4413      	add	r3, r2
 800120e:	3360      	adds	r3, #96	; 0x60
 8001210:	2202      	movs	r2, #2
 8001212:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	015a      	lsls	r2, r3, #5
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	4413      	add	r3, r2
 800121c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800122a:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001232:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	015a      	lsls	r2, r3, #5
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	4413      	add	r3, r2
 800123c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001240:	461a      	mov	r2, r3
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001246:	e050      	b.n	80012ea <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	212c      	movs	r1, #44	; 0x2c
 800124e:	fb01 f303 	mul.w	r3, r1, r3
 8001252:	4413      	add	r3, r2
 8001254:	3361      	adds	r3, #97	; 0x61
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b03      	cmp	r3, #3
 800125a:	d122      	bne.n	80012a2 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	212c      	movs	r1, #44	; 0x2c
 8001262:	fb01 f303 	mul.w	r3, r1, r3
 8001266:	4413      	add	r3, r2
 8001268:	3360      	adds	r3, #96	; 0x60
 800126a:	2202      	movs	r2, #2
 800126c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	015a      	lsls	r2, r3, #5
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	4413      	add	r3, r2
 8001276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001284:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800128c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	015a      	lsls	r2, r3, #5
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	4413      	add	r3, r2
 8001296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800129a:	461a      	mov	r2, r3
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	6013      	str	r3, [r2, #0]
 80012a0:	e023      	b.n	80012ea <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	212c      	movs	r1, #44	; 0x2c
 80012a8:	fb01 f303 	mul.w	r3, r1, r3
 80012ac:	4413      	add	r3, r2
 80012ae:	3361      	adds	r3, #97	; 0x61
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b07      	cmp	r3, #7
 80012b4:	d119      	bne.n	80012ea <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	212c      	movs	r1, #44	; 0x2c
 80012bc:	fb01 f303 	mul.w	r3, r1, r3
 80012c0:	4413      	add	r3, r2
 80012c2:	335c      	adds	r3, #92	; 0x5c
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	1c5a      	adds	r2, r3, #1
 80012c8:	6879      	ldr	r1, [r7, #4]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	202c      	movs	r0, #44	; 0x2c
 80012ce:	fb00 f303 	mul.w	r3, r0, r3
 80012d2:	440b      	add	r3, r1
 80012d4:	335c      	adds	r3, #92	; 0x5c
 80012d6:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	212c      	movs	r1, #44	; 0x2c
 80012de:	fb01 f303 	mul.w	r3, r1, r3
 80012e2:	4413      	add	r3, r2
 80012e4:	3360      	adds	r3, #96	; 0x60
 80012e6:	2204      	movs	r2, #4
 80012e8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	015a      	lsls	r2, r3, #5
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	4413      	add	r3, r2
 80012f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80012f6:	461a      	mov	r2, r3
 80012f8:	2302      	movs	r3, #2
 80012fa:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	b2d9      	uxtb	r1, r3
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	202c      	movs	r0, #44	; 0x2c
 8001306:	fb00 f303 	mul.w	r3, r0, r3
 800130a:	4413      	add	r3, r2
 800130c:	3360      	adds	r3, #96	; 0x60
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	461a      	mov	r2, r3
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f001 fd23 	bl	8002d5e <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001318:	e061      	b.n	80013de <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	015a      	lsls	r2, r3, #5
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	4413      	add	r3, r2
 8001322:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	f003 0310 	and.w	r3, r3, #16
 800132c:	2b10      	cmp	r3, #16
 800132e:	d156      	bne.n	80013de <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	212c      	movs	r1, #44	; 0x2c
 8001336:	fb01 f303 	mul.w	r3, r1, r3
 800133a:	4413      	add	r3, r2
 800133c:	333f      	adds	r3, #63	; 0x3f
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b03      	cmp	r3, #3
 8001342:	d111      	bne.n	8001368 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	212c      	movs	r1, #44	; 0x2c
 800134a:	fb01 f303 	mul.w	r3, r1, r3
 800134e:	4413      	add	r3, r2
 8001350:	335c      	adds	r3, #92	; 0x5c
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	68fa      	ldr	r2, [r7, #12]
 800135c:	b2d2      	uxtb	r2, r2
 800135e:	4611      	mov	r1, r2
 8001360:	4618      	mov	r0, r3
 8001362:	f001 faa5 	bl	80028b0 <USB_HC_Halt>
 8001366:	e031      	b.n	80013cc <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	212c      	movs	r1, #44	; 0x2c
 800136e:	fb01 f303 	mul.w	r3, r1, r3
 8001372:	4413      	add	r3, r2
 8001374:	333f      	adds	r3, #63	; 0x3f
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d009      	beq.n	8001390 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	212c      	movs	r1, #44	; 0x2c
 8001382:	fb01 f303 	mul.w	r3, r1, r3
 8001386:	4413      	add	r3, r2
 8001388:	333f      	adds	r3, #63	; 0x3f
 800138a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800138c:	2b02      	cmp	r3, #2
 800138e:	d11d      	bne.n	80013cc <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	212c      	movs	r1, #44	; 0x2c
 8001396:	fb01 f303 	mul.w	r3, r1, r3
 800139a:	4413      	add	r3, r2
 800139c:	335c      	adds	r3, #92	; 0x5c
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	691b      	ldr	r3, [r3, #16]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d110      	bne.n	80013cc <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	212c      	movs	r1, #44	; 0x2c
 80013b0:	fb01 f303 	mul.w	r3, r1, r3
 80013b4:	4413      	add	r3, r2
 80013b6:	3361      	adds	r3, #97	; 0x61
 80013b8:	2203      	movs	r2, #3
 80013ba:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	68fa      	ldr	r2, [r7, #12]
 80013c2:	b2d2      	uxtb	r2, r2
 80013c4:	4611      	mov	r1, r2
 80013c6:	4618      	mov	r0, r3
 80013c8:	f001 fa72 	bl	80028b0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	015a      	lsls	r2, r3, #5
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	4413      	add	r3, r2
 80013d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80013d8:	461a      	mov	r2, r3
 80013da:	2310      	movs	r3, #16
 80013dc:	6093      	str	r3, [r2, #8]
}
 80013de:	bf00      	nop
 80013e0:	3718      	adds	r7, #24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b088      	sub	sp, #32
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
 80013ee:	460b      	mov	r3, r1
 80013f0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80013fc:	78fb      	ldrb	r3, [r7, #3]
 80013fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	015a      	lsls	r2, r3, #5
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	4413      	add	r3, r2
 8001408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	f003 0304 	and.w	r3, r3, #4
 8001412:	2b04      	cmp	r3, #4
 8001414:	d11a      	bne.n	800144c <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	015a      	lsls	r2, r3, #5
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	4413      	add	r3, r2
 800141e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001422:	461a      	mov	r2, r3
 8001424:	2304      	movs	r3, #4
 8001426:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	212c      	movs	r1, #44	; 0x2c
 800142e:	fb01 f303 	mul.w	r3, r1, r3
 8001432:	4413      	add	r3, r2
 8001434:	3361      	adds	r3, #97	; 0x61
 8001436:	2206      	movs	r2, #6
 8001438:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	697a      	ldr	r2, [r7, #20]
 8001440:	b2d2      	uxtb	r2, r2
 8001442:	4611      	mov	r1, r2
 8001444:	4618      	mov	r0, r3
 8001446:	f001 fa33 	bl	80028b0 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 800144a:	e331      	b.n	8001ab0 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	015a      	lsls	r2, r3, #5
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	4413      	add	r3, r2
 8001454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	f003 0320 	and.w	r3, r3, #32
 800145e:	2b20      	cmp	r3, #32
 8001460:	d12e      	bne.n	80014c0 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	015a      	lsls	r2, r3, #5
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	4413      	add	r3, r2
 800146a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800146e:	461a      	mov	r2, r3
 8001470:	2320      	movs	r3, #32
 8001472:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	212c      	movs	r1, #44	; 0x2c
 800147a:	fb01 f303 	mul.w	r3, r1, r3
 800147e:	4413      	add	r3, r2
 8001480:	333d      	adds	r3, #61	; 0x3d
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b01      	cmp	r3, #1
 8001486:	f040 8313 	bne.w	8001ab0 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	212c      	movs	r1, #44	; 0x2c
 8001490:	fb01 f303 	mul.w	r3, r1, r3
 8001494:	4413      	add	r3, r2
 8001496:	333d      	adds	r3, #61	; 0x3d
 8001498:	2200      	movs	r2, #0
 800149a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	212c      	movs	r1, #44	; 0x2c
 80014a2:	fb01 f303 	mul.w	r3, r1, r3
 80014a6:	4413      	add	r3, r2
 80014a8:	3360      	adds	r3, #96	; 0x60
 80014aa:	2202      	movs	r2, #2
 80014ac:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	697a      	ldr	r2, [r7, #20]
 80014b4:	b2d2      	uxtb	r2, r2
 80014b6:	4611      	mov	r1, r2
 80014b8:	4618      	mov	r0, r3
 80014ba:	f001 f9f9 	bl	80028b0 <USB_HC_Halt>
}
 80014be:	e2f7      	b.n	8001ab0 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	015a      	lsls	r2, r3, #5
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	4413      	add	r3, r2
 80014c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014d6:	d112      	bne.n	80014fe <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	015a      	lsls	r2, r3, #5
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	4413      	add	r3, r2
 80014e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014e4:	461a      	mov	r2, r3
 80014e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014ea:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	697a      	ldr	r2, [r7, #20]
 80014f2:	b2d2      	uxtb	r2, r2
 80014f4:	4611      	mov	r1, r2
 80014f6:	4618      	mov	r0, r3
 80014f8:	f001 f9da 	bl	80028b0 <USB_HC_Halt>
}
 80014fc:	e2d8      	b.n	8001ab0 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	015a      	lsls	r2, r3, #5
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	4413      	add	r3, r2
 8001506:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	f003 0301 	and.w	r3, r3, #1
 8001510:	2b01      	cmp	r3, #1
 8001512:	d140      	bne.n	8001596 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	212c      	movs	r1, #44	; 0x2c
 800151a:	fb01 f303 	mul.w	r3, r1, r3
 800151e:	4413      	add	r3, r2
 8001520:	335c      	adds	r3, #92	; 0x5c
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	015a      	lsls	r2, r3, #5
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	4413      	add	r3, r2
 800152e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001538:	2b40      	cmp	r3, #64	; 0x40
 800153a:	d111      	bne.n	8001560 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	212c      	movs	r1, #44	; 0x2c
 8001542:	fb01 f303 	mul.w	r3, r1, r3
 8001546:	4413      	add	r3, r2
 8001548:	333d      	adds	r3, #61	; 0x3d
 800154a:	2201      	movs	r2, #1
 800154c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	015a      	lsls	r2, r3, #5
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	4413      	add	r3, r2
 8001556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800155a:	461a      	mov	r2, r3
 800155c:	2340      	movs	r3, #64	; 0x40
 800155e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	015a      	lsls	r2, r3, #5
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	4413      	add	r3, r2
 8001568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800156c:	461a      	mov	r2, r3
 800156e:	2301      	movs	r3, #1
 8001570:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	212c      	movs	r1, #44	; 0x2c
 8001578:	fb01 f303 	mul.w	r3, r1, r3
 800157c:	4413      	add	r3, r2
 800157e:	3361      	adds	r3, #97	; 0x61
 8001580:	2201      	movs	r2, #1
 8001582:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	697a      	ldr	r2, [r7, #20]
 800158a:	b2d2      	uxtb	r2, r2
 800158c:	4611      	mov	r1, r2
 800158e:	4618      	mov	r0, r3
 8001590:	f001 f98e 	bl	80028b0 <USB_HC_Halt>
}
 8001594:	e28c      	b.n	8001ab0 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	015a      	lsls	r2, r3, #5
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	4413      	add	r3, r2
 800159e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015a8:	2b40      	cmp	r3, #64	; 0x40
 80015aa:	d12c      	bne.n	8001606 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	212c      	movs	r1, #44	; 0x2c
 80015b2:	fb01 f303 	mul.w	r3, r1, r3
 80015b6:	4413      	add	r3, r2
 80015b8:	3361      	adds	r3, #97	; 0x61
 80015ba:	2204      	movs	r2, #4
 80015bc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	212c      	movs	r1, #44	; 0x2c
 80015c4:	fb01 f303 	mul.w	r3, r1, r3
 80015c8:	4413      	add	r3, r2
 80015ca:	333d      	adds	r3, #61	; 0x3d
 80015cc:	2201      	movs	r2, #1
 80015ce:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	212c      	movs	r1, #44	; 0x2c
 80015d6:	fb01 f303 	mul.w	r3, r1, r3
 80015da:	4413      	add	r3, r2
 80015dc:	335c      	adds	r3, #92	; 0x5c
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	697a      	ldr	r2, [r7, #20]
 80015e8:	b2d2      	uxtb	r2, r2
 80015ea:	4611      	mov	r1, r2
 80015ec:	4618      	mov	r0, r3
 80015ee:	f001 f95f 	bl	80028b0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	015a      	lsls	r2, r3, #5
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	4413      	add	r3, r2
 80015fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015fe:	461a      	mov	r2, r3
 8001600:	2340      	movs	r3, #64	; 0x40
 8001602:	6093      	str	r3, [r2, #8]
}
 8001604:	e254      	b.n	8001ab0 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	015a      	lsls	r2, r3, #5
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	4413      	add	r3, r2
 800160e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f003 0308 	and.w	r3, r3, #8
 8001618:	2b08      	cmp	r3, #8
 800161a:	d11a      	bne.n	8001652 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	015a      	lsls	r2, r3, #5
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	4413      	add	r3, r2
 8001624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001628:	461a      	mov	r2, r3
 800162a:	2308      	movs	r3, #8
 800162c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	212c      	movs	r1, #44	; 0x2c
 8001634:	fb01 f303 	mul.w	r3, r1, r3
 8001638:	4413      	add	r3, r2
 800163a:	3361      	adds	r3, #97	; 0x61
 800163c:	2205      	movs	r2, #5
 800163e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	697a      	ldr	r2, [r7, #20]
 8001646:	b2d2      	uxtb	r2, r2
 8001648:	4611      	mov	r1, r2
 800164a:	4618      	mov	r0, r3
 800164c:	f001 f930 	bl	80028b0 <USB_HC_Halt>
}
 8001650:	e22e      	b.n	8001ab0 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	015a      	lsls	r2, r3, #5
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	4413      	add	r3, r2
 800165a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f003 0310 	and.w	r3, r3, #16
 8001664:	2b10      	cmp	r3, #16
 8001666:	d140      	bne.n	80016ea <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	212c      	movs	r1, #44	; 0x2c
 800166e:	fb01 f303 	mul.w	r3, r1, r3
 8001672:	4413      	add	r3, r2
 8001674:	335c      	adds	r3, #92	; 0x5c
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	212c      	movs	r1, #44	; 0x2c
 8001680:	fb01 f303 	mul.w	r3, r1, r3
 8001684:	4413      	add	r3, r2
 8001686:	3361      	adds	r3, #97	; 0x61
 8001688:	2203      	movs	r2, #3
 800168a:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	212c      	movs	r1, #44	; 0x2c
 8001692:	fb01 f303 	mul.w	r3, r1, r3
 8001696:	4413      	add	r3, r2
 8001698:	333d      	adds	r3, #61	; 0x3d
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d112      	bne.n	80016c6 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	212c      	movs	r1, #44	; 0x2c
 80016a6:	fb01 f303 	mul.w	r3, r1, r3
 80016aa:	4413      	add	r3, r2
 80016ac:	333c      	adds	r3, #60	; 0x3c
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d108      	bne.n	80016c6 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	212c      	movs	r1, #44	; 0x2c
 80016ba:	fb01 f303 	mul.w	r3, r1, r3
 80016be:	4413      	add	r3, r2
 80016c0:	333d      	adds	r3, #61	; 0x3d
 80016c2:	2201      	movs	r2, #1
 80016c4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	697a      	ldr	r2, [r7, #20]
 80016cc:	b2d2      	uxtb	r2, r2
 80016ce:	4611      	mov	r1, r2
 80016d0:	4618      	mov	r0, r3
 80016d2:	f001 f8ed 	bl	80028b0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	015a      	lsls	r2, r3, #5
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	4413      	add	r3, r2
 80016de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016e2:	461a      	mov	r2, r3
 80016e4:	2310      	movs	r3, #16
 80016e6:	6093      	str	r3, [r2, #8]
}
 80016e8:	e1e2      	b.n	8001ab0 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	015a      	lsls	r2, r3, #5
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	4413      	add	r3, r2
 80016f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016fc:	2b80      	cmp	r3, #128	; 0x80
 80016fe:	d164      	bne.n	80017ca <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	691b      	ldr	r3, [r3, #16]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d111      	bne.n	800172c <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	212c      	movs	r1, #44	; 0x2c
 800170e:	fb01 f303 	mul.w	r3, r1, r3
 8001712:	4413      	add	r3, r2
 8001714:	3361      	adds	r3, #97	; 0x61
 8001716:	2206      	movs	r2, #6
 8001718:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	697a      	ldr	r2, [r7, #20]
 8001720:	b2d2      	uxtb	r2, r2
 8001722:	4611      	mov	r1, r2
 8001724:	4618      	mov	r0, r3
 8001726:	f001 f8c3 	bl	80028b0 <USB_HC_Halt>
 800172a:	e044      	b.n	80017b6 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	212c      	movs	r1, #44	; 0x2c
 8001732:	fb01 f303 	mul.w	r3, r1, r3
 8001736:	4413      	add	r3, r2
 8001738:	335c      	adds	r3, #92	; 0x5c
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	1c5a      	adds	r2, r3, #1
 800173e:	6879      	ldr	r1, [r7, #4]
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	202c      	movs	r0, #44	; 0x2c
 8001744:	fb00 f303 	mul.w	r3, r0, r3
 8001748:	440b      	add	r3, r1
 800174a:	335c      	adds	r3, #92	; 0x5c
 800174c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	212c      	movs	r1, #44	; 0x2c
 8001754:	fb01 f303 	mul.w	r3, r1, r3
 8001758:	4413      	add	r3, r2
 800175a:	335c      	adds	r3, #92	; 0x5c
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2b02      	cmp	r3, #2
 8001760:	d920      	bls.n	80017a4 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	212c      	movs	r1, #44	; 0x2c
 8001768:	fb01 f303 	mul.w	r3, r1, r3
 800176c:	4413      	add	r3, r2
 800176e:	335c      	adds	r3, #92	; 0x5c
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	212c      	movs	r1, #44	; 0x2c
 800177a:	fb01 f303 	mul.w	r3, r1, r3
 800177e:	4413      	add	r3, r2
 8001780:	3360      	adds	r3, #96	; 0x60
 8001782:	2204      	movs	r2, #4
 8001784:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	b2d9      	uxtb	r1, r3
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	202c      	movs	r0, #44	; 0x2c
 8001790:	fb00 f303 	mul.w	r3, r0, r3
 8001794:	4413      	add	r3, r2
 8001796:	3360      	adds	r3, #96	; 0x60
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	461a      	mov	r2, r3
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f001 fade 	bl	8002d5e <HAL_HCD_HC_NotifyURBChange_Callback>
 80017a2:	e008      	b.n	80017b6 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	212c      	movs	r1, #44	; 0x2c
 80017aa:	fb01 f303 	mul.w	r3, r1, r3
 80017ae:	4413      	add	r3, r2
 80017b0:	3360      	adds	r3, #96	; 0x60
 80017b2:	2202      	movs	r2, #2
 80017b4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	015a      	lsls	r2, r3, #5
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	4413      	add	r3, r2
 80017be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017c2:	461a      	mov	r2, r3
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	6093      	str	r3, [r2, #8]
}
 80017c8:	e172      	b.n	8001ab0 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	015a      	lsls	r2, r3, #5
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	4413      	add	r3, r2
 80017d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017e0:	d11b      	bne.n	800181a <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	212c      	movs	r1, #44	; 0x2c
 80017e8:	fb01 f303 	mul.w	r3, r1, r3
 80017ec:	4413      	add	r3, r2
 80017ee:	3361      	adds	r3, #97	; 0x61
 80017f0:	2208      	movs	r2, #8
 80017f2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	697a      	ldr	r2, [r7, #20]
 80017fa:	b2d2      	uxtb	r2, r2
 80017fc:	4611      	mov	r1, r2
 80017fe:	4618      	mov	r0, r3
 8001800:	f001 f856 	bl	80028b0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	015a      	lsls	r2, r3, #5
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	4413      	add	r3, r2
 800180c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001810:	461a      	mov	r2, r3
 8001812:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001816:	6093      	str	r3, [r2, #8]
}
 8001818:	e14a      	b.n	8001ab0 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	015a      	lsls	r2, r3, #5
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	4413      	add	r3, r2
 8001822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b02      	cmp	r3, #2
 800182e:	f040 813f 	bne.w	8001ab0 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	212c      	movs	r1, #44	; 0x2c
 8001838:	fb01 f303 	mul.w	r3, r1, r3
 800183c:	4413      	add	r3, r2
 800183e:	3361      	adds	r3, #97	; 0x61
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d17d      	bne.n	8001942 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	212c      	movs	r1, #44	; 0x2c
 800184c:	fb01 f303 	mul.w	r3, r1, r3
 8001850:	4413      	add	r3, r2
 8001852:	3360      	adds	r3, #96	; 0x60
 8001854:	2201      	movs	r2, #1
 8001856:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	212c      	movs	r1, #44	; 0x2c
 800185e:	fb01 f303 	mul.w	r3, r1, r3
 8001862:	4413      	add	r3, r2
 8001864:	333f      	adds	r3, #63	; 0x3f
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b02      	cmp	r3, #2
 800186a:	d00a      	beq.n	8001882 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	212c      	movs	r1, #44	; 0x2c
 8001872:	fb01 f303 	mul.w	r3, r1, r3
 8001876:	4413      	add	r3, r2
 8001878:	333f      	adds	r3, #63	; 0x3f
 800187a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800187c:	2b03      	cmp	r3, #3
 800187e:	f040 8100 	bne.w	8001a82 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	691b      	ldr	r3, [r3, #16]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d113      	bne.n	80018b2 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	212c      	movs	r1, #44	; 0x2c
 8001890:	fb01 f303 	mul.w	r3, r1, r3
 8001894:	4413      	add	r3, r2
 8001896:	3355      	adds	r3, #85	; 0x55
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	f083 0301 	eor.w	r3, r3, #1
 800189e:	b2d8      	uxtb	r0, r3
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	212c      	movs	r1, #44	; 0x2c
 80018a6:	fb01 f303 	mul.w	r3, r1, r3
 80018aa:	4413      	add	r3, r2
 80018ac:	3355      	adds	r3, #85	; 0x55
 80018ae:	4602      	mov	r2, r0
 80018b0:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	691b      	ldr	r3, [r3, #16]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	f040 80e3 	bne.w	8001a82 <HCD_HC_OUT_IRQHandler+0x69c>
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	212c      	movs	r1, #44	; 0x2c
 80018c2:	fb01 f303 	mul.w	r3, r1, r3
 80018c6:	4413      	add	r3, r2
 80018c8:	334c      	adds	r3, #76	; 0x4c
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	f000 80d8 	beq.w	8001a82 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	212c      	movs	r1, #44	; 0x2c
 80018d8:	fb01 f303 	mul.w	r3, r1, r3
 80018dc:	4413      	add	r3, r2
 80018de:	334c      	adds	r3, #76	; 0x4c
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	6879      	ldr	r1, [r7, #4]
 80018e4:	697a      	ldr	r2, [r7, #20]
 80018e6:	202c      	movs	r0, #44	; 0x2c
 80018e8:	fb00 f202 	mul.w	r2, r0, r2
 80018ec:	440a      	add	r2, r1
 80018ee:	3240      	adds	r2, #64	; 0x40
 80018f0:	8812      	ldrh	r2, [r2, #0]
 80018f2:	4413      	add	r3, r2
 80018f4:	3b01      	subs	r3, #1
 80018f6:	6879      	ldr	r1, [r7, #4]
 80018f8:	697a      	ldr	r2, [r7, #20]
 80018fa:	202c      	movs	r0, #44	; 0x2c
 80018fc:	fb00 f202 	mul.w	r2, r0, r2
 8001900:	440a      	add	r2, r1
 8001902:	3240      	adds	r2, #64	; 0x40
 8001904:	8812      	ldrh	r2, [r2, #0]
 8001906:	fbb3 f3f2 	udiv	r3, r3, r2
 800190a:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	2b00      	cmp	r3, #0
 8001914:	f000 80b5 	beq.w	8001a82 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	212c      	movs	r1, #44	; 0x2c
 800191e:	fb01 f303 	mul.w	r3, r1, r3
 8001922:	4413      	add	r3, r2
 8001924:	3355      	adds	r3, #85	; 0x55
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	f083 0301 	eor.w	r3, r3, #1
 800192c:	b2d8      	uxtb	r0, r3
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	212c      	movs	r1, #44	; 0x2c
 8001934:	fb01 f303 	mul.w	r3, r1, r3
 8001938:	4413      	add	r3, r2
 800193a:	3355      	adds	r3, #85	; 0x55
 800193c:	4602      	mov	r2, r0
 800193e:	701a      	strb	r2, [r3, #0]
 8001940:	e09f      	b.n	8001a82 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	212c      	movs	r1, #44	; 0x2c
 8001948:	fb01 f303 	mul.w	r3, r1, r3
 800194c:	4413      	add	r3, r2
 800194e:	3361      	adds	r3, #97	; 0x61
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b03      	cmp	r3, #3
 8001954:	d109      	bne.n	800196a <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	212c      	movs	r1, #44	; 0x2c
 800195c:	fb01 f303 	mul.w	r3, r1, r3
 8001960:	4413      	add	r3, r2
 8001962:	3360      	adds	r3, #96	; 0x60
 8001964:	2202      	movs	r2, #2
 8001966:	701a      	strb	r2, [r3, #0]
 8001968:	e08b      	b.n	8001a82 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	212c      	movs	r1, #44	; 0x2c
 8001970:	fb01 f303 	mul.w	r3, r1, r3
 8001974:	4413      	add	r3, r2
 8001976:	3361      	adds	r3, #97	; 0x61
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	2b04      	cmp	r3, #4
 800197c:	d109      	bne.n	8001992 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	212c      	movs	r1, #44	; 0x2c
 8001984:	fb01 f303 	mul.w	r3, r1, r3
 8001988:	4413      	add	r3, r2
 800198a:	3360      	adds	r3, #96	; 0x60
 800198c:	2202      	movs	r2, #2
 800198e:	701a      	strb	r2, [r3, #0]
 8001990:	e077      	b.n	8001a82 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	212c      	movs	r1, #44	; 0x2c
 8001998:	fb01 f303 	mul.w	r3, r1, r3
 800199c:	4413      	add	r3, r2
 800199e:	3361      	adds	r3, #97	; 0x61
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2b05      	cmp	r3, #5
 80019a4:	d109      	bne.n	80019ba <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	212c      	movs	r1, #44	; 0x2c
 80019ac:	fb01 f303 	mul.w	r3, r1, r3
 80019b0:	4413      	add	r3, r2
 80019b2:	3360      	adds	r3, #96	; 0x60
 80019b4:	2205      	movs	r2, #5
 80019b6:	701a      	strb	r2, [r3, #0]
 80019b8:	e063      	b.n	8001a82 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	212c      	movs	r1, #44	; 0x2c
 80019c0:	fb01 f303 	mul.w	r3, r1, r3
 80019c4:	4413      	add	r3, r2
 80019c6:	3361      	adds	r3, #97	; 0x61
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b06      	cmp	r3, #6
 80019cc:	d009      	beq.n	80019e2 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	212c      	movs	r1, #44	; 0x2c
 80019d4:	fb01 f303 	mul.w	r3, r1, r3
 80019d8:	4413      	add	r3, r2
 80019da:	3361      	adds	r3, #97	; 0x61
 80019dc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80019de:	2b08      	cmp	r3, #8
 80019e0:	d14f      	bne.n	8001a82 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	212c      	movs	r1, #44	; 0x2c
 80019e8:	fb01 f303 	mul.w	r3, r1, r3
 80019ec:	4413      	add	r3, r2
 80019ee:	335c      	adds	r3, #92	; 0x5c
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	1c5a      	adds	r2, r3, #1
 80019f4:	6879      	ldr	r1, [r7, #4]
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	202c      	movs	r0, #44	; 0x2c
 80019fa:	fb00 f303 	mul.w	r3, r0, r3
 80019fe:	440b      	add	r3, r1
 8001a00:	335c      	adds	r3, #92	; 0x5c
 8001a02:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	212c      	movs	r1, #44	; 0x2c
 8001a0a:	fb01 f303 	mul.w	r3, r1, r3
 8001a0e:	4413      	add	r3, r2
 8001a10:	335c      	adds	r3, #92	; 0x5c
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d912      	bls.n	8001a3e <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	212c      	movs	r1, #44	; 0x2c
 8001a1e:	fb01 f303 	mul.w	r3, r1, r3
 8001a22:	4413      	add	r3, r2
 8001a24:	335c      	adds	r3, #92	; 0x5c
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	212c      	movs	r1, #44	; 0x2c
 8001a30:	fb01 f303 	mul.w	r3, r1, r3
 8001a34:	4413      	add	r3, r2
 8001a36:	3360      	adds	r3, #96	; 0x60
 8001a38:	2204      	movs	r2, #4
 8001a3a:	701a      	strb	r2, [r3, #0]
 8001a3c:	e021      	b.n	8001a82 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	212c      	movs	r1, #44	; 0x2c
 8001a44:	fb01 f303 	mul.w	r3, r1, r3
 8001a48:	4413      	add	r3, r2
 8001a4a:	3360      	adds	r3, #96	; 0x60
 8001a4c:	2202      	movs	r2, #2
 8001a4e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	015a      	lsls	r2, r3, #5
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	4413      	add	r3, r2
 8001a58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001a66:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001a6e:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	015a      	lsls	r2, r3, #5
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	4413      	add	r3, r2
 8001a78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	015a      	lsls	r2, r3, #5
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	4413      	add	r3, r2
 8001a8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a8e:	461a      	mov	r2, r3
 8001a90:	2302      	movs	r3, #2
 8001a92:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	b2d9      	uxtb	r1, r3
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	202c      	movs	r0, #44	; 0x2c
 8001a9e:	fb00 f303 	mul.w	r3, r0, r3
 8001aa2:	4413      	add	r3, r2
 8001aa4:	3360      	adds	r3, #96	; 0x60
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f001 f957 	bl	8002d5e <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001ab0:	bf00      	nop
 8001ab2:	3720      	adds	r7, #32
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08a      	sub	sp, #40	; 0x28
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac8:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	6a1b      	ldr	r3, [r3, #32]
 8001ad0:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	f003 030f 	and.w	r3, r3, #15
 8001ad8:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	0c5b      	lsrs	r3, r3, #17
 8001ade:	f003 030f 	and.w	r3, r3, #15
 8001ae2:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	091b      	lsrs	r3, r3, #4
 8001ae8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001aec:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d004      	beq.n	8001afe <HCD_RXQLVL_IRQHandler+0x46>
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	2b05      	cmp	r3, #5
 8001af8:	f000 80a9 	beq.w	8001c4e <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8001afc:	e0aa      	b.n	8001c54 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f000 80a6 	beq.w	8001c52 <HCD_RXQLVL_IRQHandler+0x19a>
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	212c      	movs	r1, #44	; 0x2c
 8001b0c:	fb01 f303 	mul.w	r3, r1, r3
 8001b10:	4413      	add	r3, r2
 8001b12:	3344      	adds	r3, #68	; 0x44
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f000 809b 	beq.w	8001c52 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	212c      	movs	r1, #44	; 0x2c
 8001b22:	fb01 f303 	mul.w	r3, r1, r3
 8001b26:	4413      	add	r3, r2
 8001b28:	3350      	adds	r3, #80	; 0x50
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	441a      	add	r2, r3
 8001b30:	6879      	ldr	r1, [r7, #4]
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	202c      	movs	r0, #44	; 0x2c
 8001b36:	fb00 f303 	mul.w	r3, r0, r3
 8001b3a:	440b      	add	r3, r1
 8001b3c:	334c      	adds	r3, #76	; 0x4c
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d87a      	bhi.n	8001c3a <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6818      	ldr	r0, [r3, #0]
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	212c      	movs	r1, #44	; 0x2c
 8001b4e:	fb01 f303 	mul.w	r3, r1, r3
 8001b52:	4413      	add	r3, r2
 8001b54:	3344      	adds	r3, #68	; 0x44
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	b292      	uxth	r2, r2
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	f000 fde3 	bl	8002728 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	212c      	movs	r1, #44	; 0x2c
 8001b68:	fb01 f303 	mul.w	r3, r1, r3
 8001b6c:	4413      	add	r3, r2
 8001b6e:	3344      	adds	r3, #68	; 0x44
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	441a      	add	r2, r3
 8001b76:	6879      	ldr	r1, [r7, #4]
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	202c      	movs	r0, #44	; 0x2c
 8001b7c:	fb00 f303 	mul.w	r3, r0, r3
 8001b80:	440b      	add	r3, r1
 8001b82:	3344      	adds	r3, #68	; 0x44
 8001b84:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	212c      	movs	r1, #44	; 0x2c
 8001b8c:	fb01 f303 	mul.w	r3, r1, r3
 8001b90:	4413      	add	r3, r2
 8001b92:	3350      	adds	r3, #80	; 0x50
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	441a      	add	r2, r3
 8001b9a:	6879      	ldr	r1, [r7, #4]
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	202c      	movs	r0, #44	; 0x2c
 8001ba0:	fb00 f303 	mul.w	r3, r0, r3
 8001ba4:	440b      	add	r3, r1
 8001ba6:	3350      	adds	r3, #80	; 0x50
 8001ba8:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	015a      	lsls	r2, r3, #5
 8001bae:	6a3b      	ldr	r3, [r7, #32]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bb6:	691b      	ldr	r3, [r3, #16]
 8001bb8:	0cdb      	lsrs	r3, r3, #19
 8001bba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bbe:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	212c      	movs	r1, #44	; 0x2c
 8001bc6:	fb01 f303 	mul.w	r3, r1, r3
 8001bca:	4413      	add	r3, r2
 8001bcc:	3340      	adds	r3, #64	; 0x40
 8001bce:	881b      	ldrh	r3, [r3, #0]
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d13c      	bne.n	8001c52 <HCD_RXQLVL_IRQHandler+0x19a>
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d039      	beq.n	8001c52 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	015a      	lsls	r2, r3, #5
 8001be2:	6a3b      	ldr	r3, [r7, #32]
 8001be4:	4413      	add	r3, r2
 8001be6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001bf4:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001bfc:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	015a      	lsls	r2, r3, #5
 8001c02:	6a3b      	ldr	r3, [r7, #32]
 8001c04:	4413      	add	r3, r2
 8001c06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	212c      	movs	r1, #44	; 0x2c
 8001c16:	fb01 f303 	mul.w	r3, r1, r3
 8001c1a:	4413      	add	r3, r2
 8001c1c:	3354      	adds	r3, #84	; 0x54
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	f083 0301 	eor.w	r3, r3, #1
 8001c24:	b2d8      	uxtb	r0, r3
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	212c      	movs	r1, #44	; 0x2c
 8001c2c:	fb01 f303 	mul.w	r3, r1, r3
 8001c30:	4413      	add	r3, r2
 8001c32:	3354      	adds	r3, #84	; 0x54
 8001c34:	4602      	mov	r2, r0
 8001c36:	701a      	strb	r2, [r3, #0]
      break;
 8001c38:	e00b      	b.n	8001c52 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	212c      	movs	r1, #44	; 0x2c
 8001c40:	fb01 f303 	mul.w	r3, r1, r3
 8001c44:	4413      	add	r3, r2
 8001c46:	3360      	adds	r3, #96	; 0x60
 8001c48:	2204      	movs	r2, #4
 8001c4a:	701a      	strb	r2, [r3, #0]
      break;
 8001c4c:	e001      	b.n	8001c52 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8001c4e:	bf00      	nop
 8001c50:	e000      	b.n	8001c54 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8001c52:	bf00      	nop
  }
}
 8001c54:	bf00      	nop
 8001c56:	3728      	adds	r7, #40	; 0x28
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001c88:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	f003 0302 	and.w	r3, r3, #2
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d10b      	bne.n	8001cac <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d102      	bne.n	8001ca4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f001 f841 	bl	8002d26 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	f043 0302 	orr.w	r3, r3, #2
 8001caa:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f003 0308 	and.w	r3, r3, #8
 8001cb2:	2b08      	cmp	r3, #8
 8001cb4:	d132      	bne.n	8001d1c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	f043 0308 	orr.w	r3, r3, #8
 8001cbc:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f003 0304 	and.w	r3, r3, #4
 8001cc4:	2b04      	cmp	r3, #4
 8001cc6:	d126      	bne.n	8001d16 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d113      	bne.n	8001cf8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8001cd6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001cda:	d106      	bne.n	8001cea <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2102      	movs	r1, #2
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f000 fd99 	bl	800281a <USB_InitFSLSPClkSel>
 8001ce8:	e011      	b.n	8001d0e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2101      	movs	r1, #1
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f000 fd92 	bl	800281a <USB_InitFSLSPClkSel>
 8001cf6:	e00a      	b.n	8001d0e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d106      	bne.n	8001d0e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d06:	461a      	mov	r2, r3
 8001d08:	f64e 2360 	movw	r3, #60000	; 0xea60
 8001d0c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f001 f833 	bl	8002d7a <HAL_HCD_PortEnabled_Callback>
 8001d14:	e002      	b.n	8001d1c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f001 f83d 	bl	8002d96 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f003 0320 	and.w	r3, r3, #32
 8001d22:	2b20      	cmp	r3, #32
 8001d24:	d103      	bne.n	8001d2e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	f043 0320 	orr.w	r3, r3, #32
 8001d2c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001d34:	461a      	mov	r2, r3
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	6013      	str	r3, [r2, #0]
}
 8001d3a:	bf00      	nop
 8001d3c:	3718      	adds	r7, #24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
	...

08001d44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e12b      	b.n	8001fae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d106      	bne.n	8001d70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f7fe faee 	bl	800034c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2224      	movs	r2, #36	; 0x24
 8001d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f022 0201 	bic.w	r2, r2, #1
 8001d86:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d96:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001da6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001da8:	f000 fc24 	bl	80025f4 <HAL_RCC_GetPCLK1Freq>
 8001dac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	4a81      	ldr	r2, [pc, #516]	; (8001fb8 <HAL_I2C_Init+0x274>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d807      	bhi.n	8001dc8 <HAL_I2C_Init+0x84>
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	4a80      	ldr	r2, [pc, #512]	; (8001fbc <HAL_I2C_Init+0x278>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	bf94      	ite	ls
 8001dc0:	2301      	movls	r3, #1
 8001dc2:	2300      	movhi	r3, #0
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	e006      	b.n	8001dd6 <HAL_I2C_Init+0x92>
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	4a7d      	ldr	r2, [pc, #500]	; (8001fc0 <HAL_I2C_Init+0x27c>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	bf94      	ite	ls
 8001dd0:	2301      	movls	r3, #1
 8001dd2:	2300      	movhi	r3, #0
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e0e7      	b.n	8001fae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	4a78      	ldr	r2, [pc, #480]	; (8001fc4 <HAL_I2C_Init+0x280>)
 8001de2:	fba2 2303 	umull	r2, r3, r2, r3
 8001de6:	0c9b      	lsrs	r3, r3, #18
 8001de8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68ba      	ldr	r2, [r7, #8]
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	6a1b      	ldr	r3, [r3, #32]
 8001e04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	4a6a      	ldr	r2, [pc, #424]	; (8001fb8 <HAL_I2C_Init+0x274>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d802      	bhi.n	8001e18 <HAL_I2C_Init+0xd4>
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	3301      	adds	r3, #1
 8001e16:	e009      	b.n	8001e2c <HAL_I2C_Init+0xe8>
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e1e:	fb02 f303 	mul.w	r3, r2, r3
 8001e22:	4a69      	ldr	r2, [pc, #420]	; (8001fc8 <HAL_I2C_Init+0x284>)
 8001e24:	fba2 2303 	umull	r2, r3, r2, r3
 8001e28:	099b      	lsrs	r3, r3, #6
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	6812      	ldr	r2, [r2, #0]
 8001e30:	430b      	orrs	r3, r1
 8001e32:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e3e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	495c      	ldr	r1, [pc, #368]	; (8001fb8 <HAL_I2C_Init+0x274>)
 8001e48:	428b      	cmp	r3, r1
 8001e4a:	d819      	bhi.n	8001e80 <HAL_I2C_Init+0x13c>
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	1e59      	subs	r1, r3, #1
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e5a:	1c59      	adds	r1, r3, #1
 8001e5c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001e60:	400b      	ands	r3, r1
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d00a      	beq.n	8001e7c <HAL_I2C_Init+0x138>
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	1e59      	subs	r1, r3, #1
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e74:	3301      	adds	r3, #1
 8001e76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e7a:	e051      	b.n	8001f20 <HAL_I2C_Init+0x1dc>
 8001e7c:	2304      	movs	r3, #4
 8001e7e:	e04f      	b.n	8001f20 <HAL_I2C_Init+0x1dc>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d111      	bne.n	8001eac <HAL_I2C_Init+0x168>
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	1e58      	subs	r0, r3, #1
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6859      	ldr	r1, [r3, #4]
 8001e90:	460b      	mov	r3, r1
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	440b      	add	r3, r1
 8001e96:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	bf0c      	ite	eq
 8001ea4:	2301      	moveq	r3, #1
 8001ea6:	2300      	movne	r3, #0
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	e012      	b.n	8001ed2 <HAL_I2C_Init+0x18e>
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	1e58      	subs	r0, r3, #1
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6859      	ldr	r1, [r3, #4]
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	440b      	add	r3, r1
 8001eba:	0099      	lsls	r1, r3, #2
 8001ebc:	440b      	add	r3, r1
 8001ebe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	bf0c      	ite	eq
 8001ecc:	2301      	moveq	r3, #1
 8001ece:	2300      	movne	r3, #0
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <HAL_I2C_Init+0x196>
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e022      	b.n	8001f20 <HAL_I2C_Init+0x1dc>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d10e      	bne.n	8001f00 <HAL_I2C_Init+0x1bc>
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	1e58      	subs	r0, r3, #1
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6859      	ldr	r1, [r3, #4]
 8001eea:	460b      	mov	r3, r1
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	440b      	add	r3, r1
 8001ef0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001efa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001efe:	e00f      	b.n	8001f20 <HAL_I2C_Init+0x1dc>
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	1e58      	subs	r0, r3, #1
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6859      	ldr	r1, [r3, #4]
 8001f08:	460b      	mov	r3, r1
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	440b      	add	r3, r1
 8001f0e:	0099      	lsls	r1, r3, #2
 8001f10:	440b      	add	r3, r1
 8001f12:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f16:	3301      	adds	r3, #1
 8001f18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f20:	6879      	ldr	r1, [r7, #4]
 8001f22:	6809      	ldr	r1, [r1, #0]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	69da      	ldr	r2, [r3, #28]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a1b      	ldr	r3, [r3, #32]
 8001f3a:	431a      	orrs	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	430a      	orrs	r2, r1
 8001f42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	6911      	ldr	r1, [r2, #16]
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	68d2      	ldr	r2, [r2, #12]
 8001f5a:	4311      	orrs	r1, r2
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	6812      	ldr	r2, [r2, #0]
 8001f60:	430b      	orrs	r3, r1
 8001f62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	695a      	ldr	r2, [r3, #20]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	431a      	orrs	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f042 0201 	orr.w	r2, r2, #1
 8001f8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2220      	movs	r2, #32
 8001f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	000186a0 	.word	0x000186a0
 8001fbc:	001e847f 	.word	0x001e847f
 8001fc0:	003d08ff 	.word	0x003d08ff
 8001fc4:	431bde83 	.word	0x431bde83
 8001fc8:	10624dd3 	.word	0x10624dd3

08001fcc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b088      	sub	sp, #32
 8001fd0:	af02      	add	r7, sp, #8
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	607a      	str	r2, [r7, #4]
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	460b      	mov	r3, r1
 8001fda:	817b      	strh	r3, [r7, #10]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fe0:	f7fe fad2 	bl	8000588 <HAL_GetTick>
 8001fe4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b20      	cmp	r3, #32
 8001ff0:	f040 80e0 	bne.w	80021b4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	9300      	str	r3, [sp, #0]
 8001ff8:	2319      	movs	r3, #25
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	4970      	ldr	r1, [pc, #448]	; (80021c0 <HAL_I2C_Master_Transmit+0x1f4>)
 8001ffe:	68f8      	ldr	r0, [r7, #12]
 8002000:	f000 f964 	bl	80022cc <I2C_WaitOnFlagUntilTimeout>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800200a:	2302      	movs	r3, #2
 800200c:	e0d3      	b.n	80021b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002014:	2b01      	cmp	r3, #1
 8002016:	d101      	bne.n	800201c <HAL_I2C_Master_Transmit+0x50>
 8002018:	2302      	movs	r3, #2
 800201a:	e0cc      	b.n	80021b6 <HAL_I2C_Master_Transmit+0x1ea>
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b01      	cmp	r3, #1
 8002030:	d007      	beq.n	8002042 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f042 0201 	orr.w	r2, r2, #1
 8002040:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002050:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2221      	movs	r2, #33	; 0x21
 8002056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2210      	movs	r2, #16
 800205e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2200      	movs	r2, #0
 8002066:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	893a      	ldrh	r2, [r7, #8]
 8002072:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002078:	b29a      	uxth	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	4a50      	ldr	r2, [pc, #320]	; (80021c4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002082:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002084:	8979      	ldrh	r1, [r7, #10]
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	6a3a      	ldr	r2, [r7, #32]
 800208a:	68f8      	ldr	r0, [r7, #12]
 800208c:	f000 f89c 	bl	80021c8 <I2C_MasterRequestWrite>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e08d      	b.n	80021b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800209a:	2300      	movs	r3, #0
 800209c:	613b      	str	r3, [r7, #16]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	695b      	ldr	r3, [r3, #20]
 80020a4:	613b      	str	r3, [r7, #16]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	613b      	str	r3, [r7, #16]
 80020ae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80020b0:	e066      	b.n	8002180 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020b2:	697a      	ldr	r2, [r7, #20]
 80020b4:	6a39      	ldr	r1, [r7, #32]
 80020b6:	68f8      	ldr	r0, [r7, #12]
 80020b8:	f000 f9de 	bl	8002478 <I2C_WaitOnTXEFlagUntilTimeout>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d00d      	beq.n	80020de <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	2b04      	cmp	r3, #4
 80020c8:	d107      	bne.n	80020da <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e06b      	b.n	80021b6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e2:	781a      	ldrb	r2, [r3, #0]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ee:	1c5a      	adds	r2, r3, #1
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	3b01      	subs	r3, #1
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002106:	3b01      	subs	r3, #1
 8002108:	b29a      	uxth	r2, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	695b      	ldr	r3, [r3, #20]
 8002114:	f003 0304 	and.w	r3, r3, #4
 8002118:	2b04      	cmp	r3, #4
 800211a:	d11b      	bne.n	8002154 <HAL_I2C_Master_Transmit+0x188>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002120:	2b00      	cmp	r3, #0
 8002122:	d017      	beq.n	8002154 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002128:	781a      	ldrb	r2, [r3, #0]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002134:	1c5a      	adds	r2, r3, #1
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800213e:	b29b      	uxth	r3, r3
 8002140:	3b01      	subs	r3, #1
 8002142:	b29a      	uxth	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800214c:	3b01      	subs	r3, #1
 800214e:	b29a      	uxth	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002154:	697a      	ldr	r2, [r7, #20]
 8002156:	6a39      	ldr	r1, [r7, #32]
 8002158:	68f8      	ldr	r0, [r7, #12]
 800215a:	f000 f9ce 	bl	80024fa <I2C_WaitOnBTFFlagUntilTimeout>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d00d      	beq.n	8002180 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002168:	2b04      	cmp	r3, #4
 800216a:	d107      	bne.n	800217c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800217a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e01a      	b.n	80021b6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002184:	2b00      	cmp	r3, #0
 8002186:	d194      	bne.n	80020b2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002196:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2220      	movs	r2, #32
 800219c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80021b0:	2300      	movs	r3, #0
 80021b2:	e000      	b.n	80021b6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80021b4:	2302      	movs	r3, #2
  }
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3718      	adds	r7, #24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	00100002 	.word	0x00100002
 80021c4:	ffff0000 	.word	0xffff0000

080021c8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b088      	sub	sp, #32
 80021cc:	af02      	add	r7, sp, #8
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	607a      	str	r2, [r7, #4]
 80021d2:	603b      	str	r3, [r7, #0]
 80021d4:	460b      	mov	r3, r1
 80021d6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021dc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	2b08      	cmp	r3, #8
 80021e2:	d006      	beq.n	80021f2 <I2C_MasterRequestWrite+0x2a>
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d003      	beq.n	80021f2 <I2C_MasterRequestWrite+0x2a>
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80021f0:	d108      	bne.n	8002204 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	e00b      	b.n	800221c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002208:	2b12      	cmp	r3, #18
 800220a:	d107      	bne.n	800221c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800221a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	9300      	str	r3, [sp, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002228:	68f8      	ldr	r0, [r7, #12]
 800222a:	f000 f84f 	bl	80022cc <I2C_WaitOnFlagUntilTimeout>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d00d      	beq.n	8002250 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800223e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002242:	d103      	bne.n	800224c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f44f 7200 	mov.w	r2, #512	; 0x200
 800224a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e035      	b.n	80022bc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002258:	d108      	bne.n	800226c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800225a:	897b      	ldrh	r3, [r7, #10]
 800225c:	b2db      	uxtb	r3, r3
 800225e:	461a      	mov	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002268:	611a      	str	r2, [r3, #16]
 800226a:	e01b      	b.n	80022a4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800226c:	897b      	ldrh	r3, [r7, #10]
 800226e:	11db      	asrs	r3, r3, #7
 8002270:	b2db      	uxtb	r3, r3
 8002272:	f003 0306 	and.w	r3, r3, #6
 8002276:	b2db      	uxtb	r3, r3
 8002278:	f063 030f 	orn	r3, r3, #15
 800227c:	b2da      	uxtb	r2, r3
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	490e      	ldr	r1, [pc, #56]	; (80022c4 <I2C_MasterRequestWrite+0xfc>)
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f000 f875 	bl	800237a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e010      	b.n	80022bc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800229a:	897b      	ldrh	r3, [r7, #10]
 800229c:	b2da      	uxtb	r2, r3
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	4907      	ldr	r1, [pc, #28]	; (80022c8 <I2C_MasterRequestWrite+0x100>)
 80022aa:	68f8      	ldr	r0, [r7, #12]
 80022ac:	f000 f865 	bl	800237a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e000      	b.n	80022bc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3718      	adds	r7, #24
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	00010008 	.word	0x00010008
 80022c8:	00010002 	.word	0x00010002

080022cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	603b      	str	r3, [r7, #0]
 80022d8:	4613      	mov	r3, r2
 80022da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022dc:	e025      	b.n	800232a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e4:	d021      	beq.n	800232a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022e6:	f7fe f94f 	bl	8000588 <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d302      	bcc.n	80022fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d116      	bne.n	800232a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2200      	movs	r2, #0
 8002300:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2220      	movs	r2, #32
 8002306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002316:	f043 0220 	orr.w	r2, r3, #32
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e023      	b.n	8002372 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	0c1b      	lsrs	r3, r3, #16
 800232e:	b2db      	uxtb	r3, r3
 8002330:	2b01      	cmp	r3, #1
 8002332:	d10d      	bne.n	8002350 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	43da      	mvns	r2, r3
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	4013      	ands	r3, r2
 8002340:	b29b      	uxth	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	bf0c      	ite	eq
 8002346:	2301      	moveq	r3, #1
 8002348:	2300      	movne	r3, #0
 800234a:	b2db      	uxtb	r3, r3
 800234c:	461a      	mov	r2, r3
 800234e:	e00c      	b.n	800236a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	43da      	mvns	r2, r3
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	4013      	ands	r3, r2
 800235c:	b29b      	uxth	r3, r3
 800235e:	2b00      	cmp	r3, #0
 8002360:	bf0c      	ite	eq
 8002362:	2301      	moveq	r3, #1
 8002364:	2300      	movne	r3, #0
 8002366:	b2db      	uxtb	r3, r3
 8002368:	461a      	mov	r2, r3
 800236a:	79fb      	ldrb	r3, [r7, #7]
 800236c:	429a      	cmp	r2, r3
 800236e:	d0b6      	beq.n	80022de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3710      	adds	r7, #16
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	b084      	sub	sp, #16
 800237e:	af00      	add	r7, sp, #0
 8002380:	60f8      	str	r0, [r7, #12]
 8002382:	60b9      	str	r1, [r7, #8]
 8002384:	607a      	str	r2, [r7, #4]
 8002386:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002388:	e051      	b.n	800242e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	695b      	ldr	r3, [r3, #20]
 8002390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002394:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002398:	d123      	bne.n	80023e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023a8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80023b2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2200      	movs	r2, #0
 80023b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2220      	movs	r2, #32
 80023be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ce:	f043 0204 	orr.w	r2, r3, #4
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e046      	b.n	8002470 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e8:	d021      	beq.n	800242e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023ea:	f7fe f8cd 	bl	8000588 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d302      	bcc.n	8002400 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d116      	bne.n	800242e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2220      	movs	r2, #32
 800240a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	f043 0220 	orr.w	r2, r3, #32
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e020      	b.n	8002470 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	0c1b      	lsrs	r3, r3, #16
 8002432:	b2db      	uxtb	r3, r3
 8002434:	2b01      	cmp	r3, #1
 8002436:	d10c      	bne.n	8002452 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	695b      	ldr	r3, [r3, #20]
 800243e:	43da      	mvns	r2, r3
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	4013      	ands	r3, r2
 8002444:	b29b      	uxth	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	bf14      	ite	ne
 800244a:	2301      	movne	r3, #1
 800244c:	2300      	moveq	r3, #0
 800244e:	b2db      	uxtb	r3, r3
 8002450:	e00b      	b.n	800246a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	43da      	mvns	r2, r3
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	4013      	ands	r3, r2
 800245e:	b29b      	uxth	r3, r3
 8002460:	2b00      	cmp	r3, #0
 8002462:	bf14      	ite	ne
 8002464:	2301      	movne	r3, #1
 8002466:	2300      	moveq	r3, #0
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d18d      	bne.n	800238a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	3710      	adds	r7, #16
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002484:	e02d      	b.n	80024e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002486:	68f8      	ldr	r0, [r7, #12]
 8002488:	f000 f878 	bl	800257c <I2C_IsAcknowledgeFailed>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e02d      	b.n	80024f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800249c:	d021      	beq.n	80024e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800249e:	f7fe f873 	bl	8000588 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	68ba      	ldr	r2, [r7, #8]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d302      	bcc.n	80024b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d116      	bne.n	80024e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2200      	movs	r2, #0
 80024b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2220      	movs	r2, #32
 80024be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	f043 0220 	orr.w	r2, r3, #32
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e007      	b.n	80024f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	695b      	ldr	r3, [r3, #20]
 80024e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ec:	2b80      	cmp	r3, #128	; 0x80
 80024ee:	d1ca      	bne.n	8002486 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b084      	sub	sp, #16
 80024fe:	af00      	add	r7, sp, #0
 8002500:	60f8      	str	r0, [r7, #12]
 8002502:	60b9      	str	r1, [r7, #8]
 8002504:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002506:	e02d      	b.n	8002564 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002508:	68f8      	ldr	r0, [r7, #12]
 800250a:	f000 f837 	bl	800257c <I2C_IsAcknowledgeFailed>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e02d      	b.n	8002574 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800251e:	d021      	beq.n	8002564 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002520:	f7fe f832 	bl	8000588 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	68ba      	ldr	r2, [r7, #8]
 800252c:	429a      	cmp	r2, r3
 800252e:	d302      	bcc.n	8002536 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d116      	bne.n	8002564 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2200      	movs	r2, #0
 800253a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2220      	movs	r2, #32
 8002540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002550:	f043 0220 	orr.w	r2, r3, #32
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e007      	b.n	8002574 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	f003 0304 	and.w	r3, r3, #4
 800256e:	2b04      	cmp	r3, #4
 8002570:	d1ca      	bne.n	8002508 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	3710      	adds	r7, #16
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	695b      	ldr	r3, [r3, #20]
 800258a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800258e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002592:	d11b      	bne.n	80025cc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800259c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2220      	movs	r2, #32
 80025a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b8:	f043 0204 	orr.w	r2, r3, #4
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e000      	b.n	80025ce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
	...

080025dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025e0:	4b03      	ldr	r3, [pc, #12]	; (80025f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80025e2:	681b      	ldr	r3, [r3, #0]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	20000000 	.word	0x20000000

080025f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80025f8:	f7ff fff0 	bl	80025dc <HAL_RCC_GetHCLKFreq>
 80025fc:	4602      	mov	r2, r0
 80025fe:	4b05      	ldr	r3, [pc, #20]	; (8002614 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	0a9b      	lsrs	r3, r3, #10
 8002604:	f003 0307 	and.w	r3, r3, #7
 8002608:	4903      	ldr	r1, [pc, #12]	; (8002618 <HAL_RCC_GetPCLK1Freq+0x24>)
 800260a:	5ccb      	ldrb	r3, [r1, r3]
 800260c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002610:	4618      	mov	r0, r3
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40023800 	.word	0x40023800
 8002618:	08002ebc 	.word	0x08002ebc

0800261c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f043 0201 	orr.w	r2, r3, #1
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr

0800263e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800263e:	b480      	push	{r7}
 8002640:	b083      	sub	sp, #12
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f023 0201 	bic.w	r2, r3, #1
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800266a:	2300      	movs	r3, #0
 800266c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	3301      	adds	r3, #1
 8002672:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	4a13      	ldr	r2, [pc, #76]	; (80026c4 <USB_FlushTxFifo+0x64>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d901      	bls.n	8002680 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e01b      	b.n	80026b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	2b00      	cmp	r3, #0
 8002686:	daf2      	bge.n	800266e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8002688:	2300      	movs	r3, #0
 800268a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	019b      	lsls	r3, r3, #6
 8002690:	f043 0220 	orr.w	r2, r3, #32
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	3301      	adds	r3, #1
 800269c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	4a08      	ldr	r2, [pc, #32]	; (80026c4 <USB_FlushTxFifo+0x64>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d901      	bls.n	80026aa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e006      	b.n	80026b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	f003 0320 	and.w	r3, r3, #32
 80026b2:	2b20      	cmp	r3, #32
 80026b4:	d0f0      	beq.n	8002698 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3714      	adds	r7, #20
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	00030d40 	.word	0x00030d40

080026c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80026d0:	2300      	movs	r3, #0
 80026d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	3301      	adds	r3, #1
 80026d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	4a11      	ldr	r2, [pc, #68]	; (8002724 <USB_FlushRxFifo+0x5c>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d901      	bls.n	80026e6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e018      	b.n	8002718 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	daf2      	bge.n	80026d4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80026ee:	2300      	movs	r3, #0
 80026f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2210      	movs	r2, #16
 80026f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	3301      	adds	r3, #1
 80026fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	4a08      	ldr	r2, [pc, #32]	; (8002724 <USB_FlushRxFifo+0x5c>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d901      	bls.n	800270a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e006      	b.n	8002718 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	f003 0310 	and.w	r3, r3, #16
 8002712:	2b10      	cmp	r3, #16
 8002714:	d0f0      	beq.n	80026f8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8002716:	2300      	movs	r3, #0
}
 8002718:	4618      	mov	r0, r3
 800271a:	3714      	adds	r7, #20
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr
 8002724:	00030d40 	.word	0x00030d40

08002728 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8002728:	b480      	push	{r7}
 800272a:	b08b      	sub	sp, #44	; 0x2c
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	4613      	mov	r3, r2
 8002734:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800273e:	88fb      	ldrh	r3, [r7, #6]
 8002740:	089b      	lsrs	r3, r3, #2
 8002742:	b29b      	uxth	r3, r3
 8002744:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8002746:	88fb      	ldrh	r3, [r7, #6]
 8002748:	f003 0303 	and.w	r3, r3, #3
 800274c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800274e:	2300      	movs	r3, #0
 8002750:	623b      	str	r3, [r7, #32]
 8002752:	e014      	b.n	800277e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275e:	601a      	str	r2, [r3, #0]
    pDest++;
 8002760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002762:	3301      	adds	r3, #1
 8002764:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	3301      	adds	r3, #1
 800276a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276e:	3301      	adds	r3, #1
 8002770:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8002772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002774:	3301      	adds	r3, #1
 8002776:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8002778:	6a3b      	ldr	r3, [r7, #32]
 800277a:	3301      	adds	r3, #1
 800277c:	623b      	str	r3, [r7, #32]
 800277e:	6a3a      	ldr	r2, [r7, #32]
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	429a      	cmp	r2, r3
 8002784:	d3e6      	bcc.n	8002754 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8002786:	8bfb      	ldrh	r3, [r7, #30]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d01e      	beq.n	80027ca <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800278c:	2300      	movs	r3, #0
 800278e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002796:	461a      	mov	r2, r3
 8002798:	f107 0310 	add.w	r3, r7, #16
 800279c:	6812      	ldr	r2, [r2, #0]
 800279e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	6a3b      	ldr	r3, [r7, #32]
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	fa22 f303 	lsr.w	r3, r2, r3
 80027ac:	b2da      	uxtb	r2, r3
 80027ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b0:	701a      	strb	r2, [r3, #0]
      i++;
 80027b2:	6a3b      	ldr	r3, [r7, #32]
 80027b4:	3301      	adds	r3, #1
 80027b6:	623b      	str	r3, [r7, #32]
      pDest++;
 80027b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ba:	3301      	adds	r3, #1
 80027bc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80027be:	8bfb      	ldrh	r3, [r7, #30]
 80027c0:	3b01      	subs	r3, #1
 80027c2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80027c4:	8bfb      	ldrh	r3, [r7, #30]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1ea      	bne.n	80027a0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80027ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	372c      	adds	r7, #44	; 0x2c
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	695b      	ldr	r3, [r3, #20]
 80027e4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	4013      	ands	r3, r2
 80027ee:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80027f0:	68fb      	ldr	r3, [r7, #12]
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3714      	adds	r7, #20
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr

080027fe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80027fe:	b480      	push	{r7}
 8002800:	b083      	sub	sp, #12
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	f003 0301 	and.w	r3, r3, #1
}
 800280e:	4618      	mov	r0, r3
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr

0800281a <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800281a:	b480      	push	{r7}
 800281c:	b085      	sub	sp, #20
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
 8002822:	460b      	mov	r3, r1
 8002824:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002838:	f023 0303 	bic.w	r3, r3, #3
 800283c:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	78fb      	ldrb	r3, [r7, #3]
 8002848:	f003 0303 	and.w	r3, r3, #3
 800284c:	68f9      	ldr	r1, [r7, #12]
 800284e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002852:	4313      	orrs	r3, r2
 8002854:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8002856:	78fb      	ldrb	r3, [r7, #3]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d107      	bne.n	800286c <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002862:	461a      	mov	r2, r3
 8002864:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8002868:	6053      	str	r3, [r2, #4]
 800286a:	e009      	b.n	8002880 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800286c:	78fb      	ldrb	r3, [r7, #3]
 800286e:	2b02      	cmp	r3, #2
 8002870:	d106      	bne.n	8002880 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002878:	461a      	mov	r2, r3
 800287a:	f241 7370 	movw	r3, #6000	; 0x1770
 800287e:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3714      	adds	r7, #20
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr

0800288e <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800288e:	b480      	push	{r7}
 8002890:	b085      	sub	sp, #20
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	b29b      	uxth	r3, r3
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3714      	adds	r7, #20
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b089      	sub	sp, #36	; 0x24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	460b      	mov	r3, r1
 80028ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80028c0:	78fb      	ldrb	r3, [r7, #3]
 80028c2:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80028c4:	2300      	movs	r3, #0
 80028c6:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	015a      	lsls	r2, r3, #5
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	4413      	add	r3, r2
 80028d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	0c9b      	lsrs	r3, r3, #18
 80028d8:	f003 0303 	and.w	r3, r3, #3
 80028dc:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	015a      	lsls	r2, r3, #5
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	4413      	add	r3, r2
 80028e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	0fdb      	lsrs	r3, r3, #31
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f003 0320 	and.w	r3, r3, #32
 80028fc:	2b20      	cmp	r3, #32
 80028fe:	d104      	bne.n	800290a <USB_HC_Halt+0x5a>
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8002906:	2300      	movs	r3, #0
 8002908:	e0c8      	b.n	8002a9c <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d002      	beq.n	8002916 <USB_HC_Halt+0x66>
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	2b02      	cmp	r3, #2
 8002914:	d163      	bne.n	80029de <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	015a      	lsls	r2, r3, #5
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	4413      	add	r3, r2
 800291e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	0151      	lsls	r1, r2, #5
 8002928:	69fa      	ldr	r2, [r7, #28]
 800292a:	440a      	add	r2, r1
 800292c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002930:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002934:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f003 0320 	and.w	r3, r3, #32
 800293e:	2b00      	cmp	r3, #0
 8002940:	f040 80ab 	bne.w	8002a9a <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002948:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d133      	bne.n	80029b8 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	015a      	lsls	r2, r3, #5
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	4413      	add	r3, r2
 8002958:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	0151      	lsls	r1, r2, #5
 8002962:	69fa      	ldr	r2, [r7, #28]
 8002964:	440a      	add	r2, r1
 8002966:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800296a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800296e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	015a      	lsls	r2, r3, #5
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	4413      	add	r3, r2
 8002978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	0151      	lsls	r1, r2, #5
 8002982:	69fa      	ldr	r2, [r7, #28]
 8002984:	440a      	add	r2, r1
 8002986:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800298a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800298e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	3301      	adds	r3, #1
 8002994:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800299c:	d81d      	bhi.n	80029da <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	015a      	lsls	r2, r3, #5
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	4413      	add	r3, r2
 80029a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80029b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80029b4:	d0ec      	beq.n	8002990 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80029b6:	e070      	b.n	8002a9a <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	015a      	lsls	r2, r3, #5
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	4413      	add	r3, r2
 80029c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	0151      	lsls	r1, r2, #5
 80029ca:	69fa      	ldr	r2, [r7, #28]
 80029cc:	440a      	add	r2, r1
 80029ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80029d6:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80029d8:	e05f      	b.n	8002a9a <USB_HC_Halt+0x1ea>
            break;
 80029da:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80029dc:	e05d      	b.n	8002a9a <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	015a      	lsls	r2, r3, #5
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	4413      	add	r3, r2
 80029e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	0151      	lsls	r1, r2, #5
 80029f0:	69fa      	ldr	r2, [r7, #28]
 80029f2:	440a      	add	r2, r1
 80029f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80029fc:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d133      	bne.n	8002a76 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	015a      	lsls	r2, r3, #5
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	4413      	add	r3, r2
 8002a16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	0151      	lsls	r1, r2, #5
 8002a20:	69fa      	ldr	r2, [r7, #28]
 8002a22:	440a      	add	r2, r1
 8002a24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a2c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	015a      	lsls	r2, r3, #5
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	4413      	add	r3, r2
 8002a36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	0151      	lsls	r1, r2, #5
 8002a40:	69fa      	ldr	r2, [r7, #28]
 8002a42:	440a      	add	r2, r1
 8002a44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a4c:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	3301      	adds	r3, #1
 8002a52:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a5a:	d81d      	bhi.n	8002a98 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	015a      	lsls	r2, r3, #5
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	4413      	add	r3, r2
 8002a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002a6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a72:	d0ec      	beq.n	8002a4e <USB_HC_Halt+0x19e>
 8002a74:	e011      	b.n	8002a9a <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	015a      	lsls	r2, r3, #5
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	0151      	lsls	r1, r2, #5
 8002a88:	69fa      	ldr	r2, [r7, #28]
 8002a8a:	440a      	add	r2, r1
 8002a8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a94:	6013      	str	r3, [r2, #0]
 8002a96:	e000      	b.n	8002a9a <USB_HC_Halt+0x1ea>
          break;
 8002a98:	bf00      	nop
    }
  }

  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3724      	adds	r7, #36	; 0x24
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b088      	sub	sp, #32
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f7ff fdbe 	bl	800263e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002ac2:	2110      	movs	r1, #16
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f7ff fdcb 	bl	8002660 <USB_FlushTxFifo>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f7ff fdf7 	bl	80026c8 <USB_FlushRxFifo>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	61bb      	str	r3, [r7, #24]
 8002ae8:	e01f      	b.n	8002b2a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	015a      	lsls	r2, r3, #5
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	4413      	add	r3, r2
 8002af2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002b00:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b08:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002b10:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	015a      	lsls	r2, r3, #5
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	4413      	add	r3, r2
 8002b1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b1e:	461a      	mov	r2, r3
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	3301      	adds	r3, #1
 8002b28:	61bb      	str	r3, [r7, #24]
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	2b0f      	cmp	r3, #15
 8002b2e:	d9dc      	bls.n	8002aea <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8002b30:	2300      	movs	r3, #0
 8002b32:	61bb      	str	r3, [r7, #24]
 8002b34:	e034      	b.n	8002ba0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	015a      	lsls	r2, r3, #5
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002b4c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b54:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002b5c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	015a      	lsls	r2, r3, #5
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	4413      	add	r3, r2
 8002b66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	3301      	adds	r3, #1
 8002b74:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b7c:	d80c      	bhi.n	8002b98 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	015a      	lsls	r2, r3, #5
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	4413      	add	r3, r2
 8002b86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b94:	d0ec      	beq.n	8002b70 <USB_StopHost+0xc8>
 8002b96:	e000      	b.n	8002b9a <USB_StopHost+0xf2>
        break;
 8002b98:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	61bb      	str	r3, [r7, #24]
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	2b0f      	cmp	r3, #15
 8002ba4:	d9c7      	bls.n	8002b36 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bac:	461a      	mov	r2, r3
 8002bae:	f04f 33ff 	mov.w	r3, #4294967295
 8002bb2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f04f 32ff 	mov.w	r2, #4294967295
 8002bba:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f7ff fd2d 	bl	800261c <USB_EnableGlobalInt>

  return ret;
 8002bc2:	7ffb      	ldrb	r3, [r7, #31]
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3720      	adds	r7, #32
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8002bda:	1c5a      	adds	r2, r3, #1
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 f804 	bl	8002bf0 <USBH_HandleSof>
}
 8002be8:	bf00      	nop
 8002bea:	3708      	adds	r7, #8
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b0b      	cmp	r3, #11
 8002c00:	d10a      	bne.n	8002c18 <USBH_HandleSof+0x28>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d005      	beq.n	8002c18 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8002c12:	699b      	ldr	r3, [r3, #24]
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	4798      	blx	r3
  }
}
 8002c18:	bf00      	nop
 8002c1a:	3708      	adds	r7, #8
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8002c30:	bf00      	nop
}
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8002c4c:	bf00      	nop
}
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr

08002c86 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b082      	sub	sp, #8
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 f883 	bl	8002db2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	791b      	ldrb	r3, [r3, #4]
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 f80b 	bl	8002cce <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	795b      	ldrb	r3, [r3, #5]
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 f805 	bl	8002cce <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b083      	sub	sp, #12
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8002cda:	78fb      	ldrb	r3, [r7, #3]
 8002cdc:	2b0f      	cmp	r3, #15
 8002cde:	d80d      	bhi.n	8002cfc <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8002ce0:	78fb      	ldrb	r3, [r7, #3]
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	33e0      	adds	r3, #224	; 0xe0
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4413      	add	r3, r2
 8002cea:	685a      	ldr	r2, [r3, #4]
 8002cec:	78fb      	ldrb	r3, [r7, #3]
 8002cee:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8002cf2:	6879      	ldr	r1, [r7, #4]
 8002cf4:	33e0      	adds	r3, #224	; 0xe0
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	440b      	add	r3, r1
 8002cfa:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr

08002d0a <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b082      	sub	sp, #8
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff ff57 	bl	8002bcc <USBH_LL_IncTimer>
}
 8002d1e:	bf00      	nop
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b082      	sub	sp, #8
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7ff ff8f 	bl	8002c58 <USBH_LL_Connect>
}
 8002d3a:	bf00      	nop
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b082      	sub	sp, #8
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7ff ff98 	bl	8002c86 <USBH_LL_Disconnect>
}
 8002d56:	bf00      	nop
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	b083      	sub	sp, #12
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
 8002d66:	460b      	mov	r3, r1
 8002d68:	70fb      	strb	r3, [r7, #3]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8002d6e:	bf00      	nop
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr

08002d7a <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b082      	sub	sp, #8
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7ff ff49 	bl	8002c20 <USBH_LL_PortEnabled>
}
 8002d8e:	bf00      	nop
 8002d90:	3708      	adds	r7, #8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b082      	sub	sp, #8
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff ff49 	bl	8002c3c <USBH_LL_PortDisabled>
}
 8002daa:	bf00      	nop
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b084      	sub	sp, #16
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7fd ff9a 	bl	8000d02 <HAL_HCD_Stop>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8002dd2:	7bfb      	ldrb	r3, [r7, #15]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f000 f807 	bl	8002de8 <USBH_Get_USB_Status>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8002dde:	7bbb      	ldrb	r3, [r7, #14]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	4603      	mov	r3, r0
 8002df0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8002df2:	2300      	movs	r3, #0
 8002df4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8002df6:	79fb      	ldrb	r3, [r7, #7]
 8002df8:	2b03      	cmp	r3, #3
 8002dfa:	d817      	bhi.n	8002e2c <USBH_Get_USB_Status+0x44>
 8002dfc:	a201      	add	r2, pc, #4	; (adr r2, 8002e04 <USBH_Get_USB_Status+0x1c>)
 8002dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e02:	bf00      	nop
 8002e04:	08002e15 	.word	0x08002e15
 8002e08:	08002e1b 	.word	0x08002e1b
 8002e0c:	08002e21 	.word	0x08002e21
 8002e10:	08002e27 	.word	0x08002e27
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8002e14:	2300      	movs	r3, #0
 8002e16:	73fb      	strb	r3, [r7, #15]
    break;
 8002e18:	e00b      	b.n	8002e32 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	73fb      	strb	r3, [r7, #15]
    break;
 8002e1e:	e008      	b.n	8002e32 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8002e20:	2301      	movs	r3, #1
 8002e22:	73fb      	strb	r3, [r7, #15]
    break;
 8002e24:	e005      	b.n	8002e32 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8002e26:	2302      	movs	r3, #2
 8002e28:	73fb      	strb	r3, [r7, #15]
    break;
 8002e2a:	e002      	b.n	8002e32 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	73fb      	strb	r3, [r7, #15]
    break;
 8002e30:	bf00      	nop
  }
  return usb_status;
 8002e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3714      	adds	r7, #20
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <__libc_init_array>:
 8002e40:	b570      	push	{r4, r5, r6, lr}
 8002e42:	4d0d      	ldr	r5, [pc, #52]	; (8002e78 <__libc_init_array+0x38>)
 8002e44:	4c0d      	ldr	r4, [pc, #52]	; (8002e7c <__libc_init_array+0x3c>)
 8002e46:	1b64      	subs	r4, r4, r5
 8002e48:	10a4      	asrs	r4, r4, #2
 8002e4a:	2600      	movs	r6, #0
 8002e4c:	42a6      	cmp	r6, r4
 8002e4e:	d109      	bne.n	8002e64 <__libc_init_array+0x24>
 8002e50:	4d0b      	ldr	r5, [pc, #44]	; (8002e80 <__libc_init_array+0x40>)
 8002e52:	4c0c      	ldr	r4, [pc, #48]	; (8002e84 <__libc_init_array+0x44>)
 8002e54:	f000 f826 	bl	8002ea4 <_init>
 8002e58:	1b64      	subs	r4, r4, r5
 8002e5a:	10a4      	asrs	r4, r4, #2
 8002e5c:	2600      	movs	r6, #0
 8002e5e:	42a6      	cmp	r6, r4
 8002e60:	d105      	bne.n	8002e6e <__libc_init_array+0x2e>
 8002e62:	bd70      	pop	{r4, r5, r6, pc}
 8002e64:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e68:	4798      	blx	r3
 8002e6a:	3601      	adds	r6, #1
 8002e6c:	e7ee      	b.n	8002e4c <__libc_init_array+0xc>
 8002e6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e72:	4798      	blx	r3
 8002e74:	3601      	adds	r6, #1
 8002e76:	e7f2      	b.n	8002e5e <__libc_init_array+0x1e>
 8002e78:	08002ec4 	.word	0x08002ec4
 8002e7c:	08002ec4 	.word	0x08002ec4
 8002e80:	08002ec4 	.word	0x08002ec4
 8002e84:	08002ec8 	.word	0x08002ec8

08002e88 <memcpy>:
 8002e88:	440a      	add	r2, r1
 8002e8a:	4291      	cmp	r1, r2
 8002e8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002e90:	d100      	bne.n	8002e94 <memcpy+0xc>
 8002e92:	4770      	bx	lr
 8002e94:	b510      	push	{r4, lr}
 8002e96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002e9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002e9e:	4291      	cmp	r1, r2
 8002ea0:	d1f9      	bne.n	8002e96 <memcpy+0xe>
 8002ea2:	bd10      	pop	{r4, pc}

08002ea4 <_init>:
 8002ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ea6:	bf00      	nop
 8002ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eaa:	bc08      	pop	{r3}
 8002eac:	469e      	mov	lr, r3
 8002eae:	4770      	bx	lr

08002eb0 <_fini>:
 8002eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eb2:	bf00      	nop
 8002eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eb6:	bc08      	pop	{r3}
 8002eb8:	469e      	mov	lr, r3
 8002eba:	4770      	bx	lr
